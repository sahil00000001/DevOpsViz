{"file_contents":{"design_guidelines.md":{"content":"# Azure DevOps Analytics Dashboard Design Guidelines\n\n## Design Approach\n\n**Selected Approach: Design System (Utility-Focused)**\n- Primary focus: Data visualization and productivity analytics\n- Reference: Material Design for enterprise dashboards with clean data presentation\n- Emphasis on information density, scannable layouts, and efficient workflows\n\n## Core Design Elements\n\n### A. Color Palette\n**Dark Mode Primary (Default)**\n- Background: 218 24% 12% (Deep navy-blue background)\n- Surface: 218 20% 18% (Elevated cards and panels)\n- Primary: 213 94% 68% (Azure blue for CTAs and highlights)\n- Text Primary: 0 0% 95% (High contrast white text)\n- Text Secondary: 218 15% 70% (Muted text for secondary info)\n\n**Accent Colors**\n- Success: 142 69% 58% (Green for completed items)\n- Warning: 38 92% 50% (Orange for in-progress/blocked)\n- Error: 0 84% 60% (Red for bugs and critical issues)\n- Info: 199 89% 48% (Light blue for informational elements)\n\n### B. Typography\n- **Primary Font**: Inter (Google Fonts) for clean, readable interface text\n- **Monospace Font**: JetBrains Mono for code references, IDs, and technical data\n- **Hierarchy**: Text-sm for labels, text-base for content, text-lg/xl for headings\n\n### C. Layout System\n**Spacing Units**: Consistent use of Tailwind units 2, 4, 6, 8, 12, 16\n- `p-4` for card padding\n- `gap-6` for grid layouts\n- `mb-8` for section spacing\n- `mx-2` for tight horizontal spacing\n\n### D. Component Library\n\n**Navigation**\n- Top header with project selector and sprint dropdown\n- Breadcrumb navigation for drill-down views\n- Sidebar navigation for different dashboard sections\n\n**Data Display**\n- Metric cards with large numbers and trend indicators\n- Interactive charts using Chart.js/D3 with dark theme\n- Data tables with sorting, filtering, and pagination\n- Kanban-style boards for work item visualization\n\n**Interactive Elements**\n- Primary buttons in Azure blue with subtle hover states\n- Filter chips for quick data segmentation\n- Search bars with real-time filtering\n- Notification badges for dependency alerts\n\n**Overlays**\n- Modal dialogs for detailed work item views\n- Tooltip overlays for metric explanations\n- Loading states with skeleton screens\n\n### E. Dashboard Layout Strategy\n\n**Grid System**\n- 12-column responsive grid using CSS Grid\n- Dashboard widgets in 4, 6, 8, or 12 column spans\n- Consistent 6-unit gap between dashboard cards\n\n**Information Hierarchy**\n1. **Header Section**: Sprint selector, key metrics overview\n2. **Primary Analytics**: Large charts showing sprint progress and burndown\n3. **Work Item Breakdown**: Tabular data with filtering capabilities\n4. **Team Performance**: Individual contributor metrics and PR status\n5. **Dependencies**: Visual representation of blocked items and review queues\n\n### F. Data Visualization Principles\n\n**Chart Types**\n- Burndown charts for sprint progress\n- Donut charts for completion percentages\n- Bar charts for individual team member performance\n- Timeline views for PR review workflows\n\n**Interactive Features**\n- Click-through to Azure DevOps work items\n- Hover states revealing additional context\n- Real-time updates with subtle animation indicators\n- Dependency highlighting on selection\n\n**Performance Considerations**\n- Lazy loading for large datasets\n- Pagination for work item lists\n- Efficient API calls with caching\n- Progressive enhancement for complex visualizations\n\nThis design creates a professional, data-focused dashboard that prioritizes clarity and actionable insights while maintaining visual appeal through strategic use of Azure's brand colors and modern interface patterns.","size_bytes":3613},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"JetBrains Mono\", \"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4077},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/azure-devops-service.ts":{"content":"import type { \n  Repository, \n  Commit, \n  WorkItem, \n  PullRequest, \n  TeamMember, \n  Sprint \n} from \"@shared/schema\";\n\ninterface AzureDevOpsConfig {\n  organization: string;\n  project: string;\n  pat: string;\n}\n\ninterface AzureDevOpsApiResponse<T> {\n  count: number;\n  value: T[];\n}\n\ninterface CommitAnalytics {\n  totalCommits: number;\n  contributorsCount: number;\n  topContributors: Array<{\n    name: string;\n    email: string;\n    commitCount: number;\n    linesAdded: number;\n    linesDeleted: number;\n  }>;\n  commitsByDay: Array<{\n    date: string;\n    count: number;\n  }>;\n  recentCommits: Commit[];\n}\n\ninterface WorkItemAnalytics {\n  totalWorkItems: number;\n  completedWorkItems: number;\n  inProgressWorkItems: number;\n  blockedWorkItems: number;\n  workItemsByType: Array<{\n    type: string;\n    count: number;\n  }>;\n  workItemsByState: Array<{\n    state: string;\n    count: number;\n  }>;\n}\n\nexport class AzureDevOpsService {\n  private config: AzureDevOpsConfig;\n  private baseUrl: string;\n\n  constructor(organization: string, project: string, pat: string) {\n    this.config = { organization, project, pat };\n    this.baseUrl = `https://dev.azure.com/${organization}/${project}/_apis`;\n  }\n\n  private getAuthHeaders() {\n    const token = Buffer.from(`:${this.config.pat}`).toString('base64');\n    return {\n      'Authorization': `Basic ${token}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  private async makeRequest<T>(url: string): Promise<T> {\n    try {\n      const response = await fetch(url, {\n        headers: this.getAuthHeaders()\n      });\n\n      if (!response.ok) {\n        throw new Error(`Azure DevOps API error: ${response.status} ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Azure DevOps API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Repository Management\n  async getRepositories(): Promise<Repository[]> {\n    const url = `${this.baseUrl}/git/repositories?api-version=7.1`;\n    const response = await this.makeRequest<AzureDevOpsApiResponse<any>>(url);\n    \n    return response.value.map(repo => ({\n      id: repo.id,\n      name: repo.name,\n      projectId: repo.project.id,\n      projectName: repo.project.name,\n      organization: this.config.organization,\n      defaultBranch: repo.defaultBranch,\n      size: repo.size,\n      url: repo.url,\n      webUrl: repo.webUrl,\n      createdDate: repo.project.lastUpdateTime ? new Date(repo.project.lastUpdateTime) : null,\n      lastUpdated: new Date()\n    }));\n  }\n\n  // Commit Management\n  async getCommits(repositoryId: string, top = 100, skip = 0): Promise<Commit[]> {\n    const url = `${this.baseUrl}/git/repositories/${repositoryId}/commits?$top=${top}&$skip=${skip}&api-version=7.1`;\n    const response = await this.makeRequest<AzureDevOpsApiResponse<any>>(url);\n    \n    return response.value.map(commit => ({\n      id: `${repositoryId}-${commit.commitId}`,\n      commitId: commit.commitId,\n      repositoryId,\n      authorName: commit.author.name,\n      authorEmail: commit.author.email,\n      authorDate: new Date(commit.author.date),\n      committerName: commit.committer.name,\n      committerEmail: commit.committer.email,\n      committerDate: new Date(commit.committer.date),\n      comment: commit.comment,\n      commentTruncated: commit.commentTruncated || false,\n      changeCounts: commit.changeCounts || { Add: 0, Edit: 0, Delete: 0 },\n      url: commit.url,\n      remoteUrl: commit.remoteUrl,\n      lastUpdated: new Date()\n    }));\n  }\n\n  async getCommitAnalytics(repositoryId: string, days = 30): Promise<CommitAnalytics> {\n    const since = new Date();\n    since.setDate(since.getDate() - days);\n    \n    // Get commits for the specified period\n    const commits = await this.getCommits(repositoryId, 1000);\n    const recentCommits = commits.filter(commit => \n      commit.authorDate >= since\n    );\n\n    // Calculate contributor statistics\n    const contributorMap = new Map<string, {\n      name: string;\n      email: string;\n      commitCount: number;\n      linesAdded: number;\n      linesDeleted: number;\n    }>();\n\n    const commitsByDayMap = new Map<string, number>();\n\n    for (const commit of recentCommits) {\n      const authorKey = `${commit.authorName}:${commit.authorEmail}`;\n      const dateKey = commit.authorDate.toISOString().split('T')[0];\n\n      // Track contributors\n      if (!contributorMap.has(authorKey)) {\n        contributorMap.set(authorKey, {\n          name: commit.authorName,\n          email: commit.authorEmail,\n          commitCount: 0,\n          linesAdded: 0,\n          linesDeleted: 0\n        });\n      }\n      \n      const contributor = contributorMap.get(authorKey)!;\n      contributor.commitCount++;\n      contributor.linesAdded += commit.changeCounts?.Add || 0;\n      contributor.linesDeleted += commit.changeCounts?.Delete || 0;\n\n      // Track commits by day\n      commitsByDayMap.set(dateKey, (commitsByDayMap.get(dateKey) || 0) + 1);\n    }\n\n    // Convert to arrays and sort\n    const topContributors = Array.from(contributorMap.values())\n      .sort((a, b) => b.commitCount - a.commitCount)\n      .slice(0, 10);\n\n    const commitsByDay = Array.from(commitsByDayMap.entries())\n      .map(([date, count]) => ({ date, count }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n\n    return {\n      totalCommits: commits.length,\n      contributorsCount: contributorMap.size,\n      topContributors,\n      commitsByDay,\n      recentCommits: recentCommits.slice(0, 10)\n    };\n  }\n\n  // Work Item Management\n  async getWorkItems(iterationPath?: string): Promise<WorkItem[]> {\n    try {\n      // Simple WIQL query to get work items\n      let wiqlQuery = `SELECT [System.Id] FROM WorkItems WHERE [System.TeamProject] = '${this.config.project}'`;\n      \n      if (iterationPath) {\n        wiqlQuery += ` AND [System.IterationPath] UNDER '${iterationPath}'`;\n      }\n      \n      wiqlQuery += ` ORDER BY [System.ChangedDate] DESC`;\n\n      console.log('Executing WIQL query:', wiqlQuery);\n\n      const wiqlUrl = `${this.baseUrl}/wit/wiql?api-version=7.1`;\n      const wiqlResponse = await fetch(wiqlUrl, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({ query: wiqlQuery })\n      });\n\n      if (!wiqlResponse.ok) {\n        const errorText = await wiqlResponse.text();\n        console.error(`Work Item Query failed: ${wiqlResponse.status} ${wiqlResponse.statusText}`, errorText);\n        return [];\n      }\n\n      const wiqlResult = await wiqlResponse.json();\n      console.log('WIQL result:', wiqlResult);\n      \n      if (!wiqlResult.workItems || wiqlResult.workItems.length === 0) {\n        console.log('No work items found in WIQL result');\n        return [];\n      }\n\n      // Get work item IDs (limit to first 200 for performance)\n      const workItemIds = wiqlResult.workItems.slice(0, 200).map((wi: any) => wi.id);\n      const idsParam = workItemIds.join(',');\n      \n      console.log(`Fetching details for ${workItemIds.length} work items`);\n      \n      // Get detailed work item data\n      const workItemsUrl = `${this.baseUrl}/wit/workitems?ids=${idsParam}&$expand=Fields&api-version=7.1`;\n      const workItemsResponse = await this.makeRequest<AzureDevOpsApiResponse<any>>(workItemsUrl);\n\n      return workItemsResponse.value.map(wi => ({\n        id: wi.id,\n        rev: wi.rev,\n        projectName: this.config.project,\n        areaPath: wi.fields['System.AreaPath'],\n        iterationPath: wi.fields['System.IterationPath'],\n        workItemType: wi.fields['System.WorkItemType'],\n        state: wi.fields['System.State'],\n        reason: wi.fields['System.Reason'],\n        title: wi.fields['System.Title'],\n        assignedToName: wi.fields['System.AssignedTo']?.displayName,\n        assignedToEmail: wi.fields['System.AssignedTo']?.uniqueName,\n        assignedToImageUrl: wi.fields['System.AssignedTo']?._links?.avatar?.href,\n        createdDate: new Date(wi.fields['System.CreatedDate']),\n        createdByName: wi.fields['System.CreatedBy']?.displayName,\n        createdByEmail: wi.fields['System.CreatedBy']?.uniqueName,\n        changedDate: wi.fields['System.ChangedDate'] ? new Date(wi.fields['System.ChangedDate']) : null,\n        description: wi.fields['System.Description'],\n        acceptanceCriteria: wi.fields['Microsoft.VSTS.Common.AcceptanceCriteria'],\n        storyPoints: wi.fields['Microsoft.VSTS.Scheduling.StoryPoints'],\n        priority: wi.fields['System.Priority'],\n        severity: wi.fields['Microsoft.VSTS.Common.Severity'],\n        tags: wi.fields['System.Tags'] ? wi.fields['System.Tags'].split(';').map((tag: string) => tag.trim()) : [],\n        url: wi.url,\n        lastUpdated: new Date()\n      }));\n    } catch (error) {\n      console.error('Failed to fetch work items:', error);\n      return [];\n    }\n  }\n\n  async getWorkItemAnalytics(iterationPath?: string): Promise<WorkItemAnalytics> {\n    const workItems = await this.getWorkItems(iterationPath);\n    \n    const workItemsByType = new Map<string, number>();\n    const workItemsByState = new Map<string, number>();\n    \n    let completedCount = 0;\n    let inProgressCount = 0;\n    let blockedCount = 0;\n\n    for (const wi of workItems) {\n      // Count by type\n      workItemsByType.set(wi.workItemType, (workItemsByType.get(wi.workItemType) || 0) + 1);\n      \n      // Count by state\n      workItemsByState.set(wi.state, (workItemsByState.get(wi.state) || 0) + 1);\n      \n      // Count by status categories\n      const state = wi.state.toLowerCase();\n      if (state.includes('done') || state.includes('closed') || state.includes('resolved')) {\n        completedCount++;\n      } else if (state.includes('active') || state.includes('progress') || state.includes('committed')) {\n        inProgressCount++;\n      } else if (state.includes('blocked') || state.includes('removed')) {\n        blockedCount++;\n      }\n    }\n\n    return {\n      totalWorkItems: workItems.length,\n      completedWorkItems: completedCount,\n      inProgressWorkItems: inProgressCount,\n      blockedWorkItems: blockedCount,\n      workItemsByType: Array.from(workItemsByType.entries()).map(([type, count]) => ({ type, count })),\n      workItemsByState: Array.from(workItemsByState.entries()).map(([state, count]) => ({ state, count }))\n    };\n  }\n\n  // Pull Request Management\n  async getPullRequests(repositoryId: string, status = 'all'): Promise<PullRequest[]> {\n    const statusFilter = status !== 'all' ? `&searchCriteria.status=${status}` : '';\n    const url = `${this.baseUrl}/git/repositories/${repositoryId}/pullrequests?api-version=7.1${statusFilter}`;\n    const response = await this.makeRequest<AzureDevOpsApiResponse<any>>(url);\n    \n    return response.value.map(pr => ({\n      id: parseInt(`${repositoryId.slice(-4)}${pr.pullRequestId}`), // Create unique ID\n      repositoryId,\n      pullRequestId: pr.pullRequestId,\n      codeReviewId: pr.codeReviewId,\n      status: pr.status,\n      title: pr.title,\n      description: pr.description,\n      sourceRefName: pr.sourceRefName,\n      targetRefName: pr.targetRefName,\n      mergeStatus: pr.mergeStatus,\n      isDraft: pr.isDraft || false,\n      createdByName: pr.createdBy.displayName,\n      createdByEmail: pr.createdBy.uniqueName,\n      createdByImageUrl: pr.createdBy._links?.avatar?.href,\n      creationDate: new Date(pr.creationDate),\n      reviewers: pr.reviewers?.map((reviewer: any) => ({\n        displayName: reviewer.displayName,\n        email: reviewer.uniqueName,\n        imageUrl: reviewer._links?.avatar?.href,\n        vote: this.mapReviewerVote(reviewer.vote),\n        isRequired: reviewer.isRequired || false\n      })) || [],\n      workItemIds: [], // Will be populated separately if needed\n      url: pr.url,\n      lastUpdated: new Date()\n    }));\n  }\n\n  private mapReviewerVote(vote: number): 'approved' | 'approved_with_suggestions' | 'no_vote' | 'waiting' | 'rejected' {\n    switch (vote) {\n      case 10: return 'approved';\n      case 5: return 'approved_with_suggestions';\n      case 0: return 'no_vote';\n      case -5: return 'waiting';\n      case -10: return 'rejected';\n      default: return 'no_vote';\n    }\n  }\n\n  // Team Member Management\n  async getTeamMembers(): Promise<TeamMember[]> {\n    const url = `https://vssps.dev.azure.com/${this.config.organization}/_apis/graph/users?api-version=7.1-preview.1`;\n    \n    try {\n      const response = await this.makeRequest<AzureDevOpsApiResponse<any>>(url);\n      \n      return response.value.map(member => ({\n        id: member.descriptor,\n        displayName: member.displayName,\n        email: member.mailAddress,\n        uniqueName: member.principalName,\n        imageUrl: member._links?.avatar?.href,\n        projectName: this.config.project,\n        organization: this.config.organization,\n        lastUpdated: new Date()\n      }));\n    } catch (error) {\n      console.warn('Could not fetch team members, using alternative approach');\n      return [];\n    }\n  }\n\n  // Sprint/Iteration Management\n  async getSprints(): Promise<Sprint[]> {\n    const url = `${this.baseUrl}/wit/classificationnodes/iterations?$depth=5&api-version=7.0`;\n    const response = await this.makeRequest<any>(url);\n    \n    // Recursively extract sprints from the nested tree\n    const sprints: Sprint[] = [];\n    \n    const extractSprints = (node: any) => {\n      // Only add nodes that have date attributes (actual sprints)\n      if (node.attributes?.startDate && node.attributes?.finishDate) {\n        sprints.push({\n          id: node.identifier || String(node.id),\n          name: node.name,\n          path: node.path,\n          projectName: this.config.project,\n          organization: this.config.organization,\n          startDate: new Date(node.attributes.startDate),\n          finishDate: new Date(node.attributes.finishDate),\n          state: this.getSprintState(node.attributes.startDate, node.attributes.finishDate),\n          attributes: node.attributes,\n          lastUpdated: new Date()\n        });\n      }\n      \n      // Recursively process children\n      if (node.children && Array.isArray(node.children)) {\n        for (const child of node.children) {\n          extractSprints(child);\n        }\n      }\n    };\n    \n    // Start extraction from the response (which might have children)\n    if (response.children && Array.isArray(response.children)) {\n      for (const child of response.children) {\n        extractSprints(child);\n      }\n    }\n    \n    return sprints;\n  }\n\n  private getSprintState(startDate?: string, finishDate?: string): string {\n    if (!startDate || !finishDate) return 'unknown';\n    \n    const now = new Date();\n    const start = new Date(startDate);\n    const finish = new Date(finishDate);\n    \n    if (now < start) return 'future';\n    if (now > finish) return 'past';\n    return 'current';\n  }\n\n  // Repository Insights\n  async getRepositoryInsights(repositoryId: string): Promise<{\n    totalCommits: number;\n    totalBranches: number;\n    totalPullRequests: number;\n    recentActivity: Array<{\n      type: 'commit' | 'pullrequest';\n      title: string;\n      author: string;\n      date: Date;\n      url: string;\n    }>;\n  }> {\n    const commits = await this.getCommits(repositoryId, 10);\n    const pullRequests = await this.getPullRequests(repositoryId);\n    \n    // Get branches\n    const branchesUrl = `${this.baseUrl}/git/repositories/${repositoryId}/refs?filter=heads&api-version=7.1`;\n    const branchesResponse = await this.makeRequest<AzureDevOpsApiResponse<any>>(branchesUrl);\n    \n    // Combine recent activity\n    const recentActivity = [\n      ...commits.map(commit => ({\n        type: 'commit' as const,\n        title: commit.comment,\n        author: commit.authorName,\n        date: commit.authorDate,\n        url: commit.remoteUrl || commit.url || ''\n      })),\n      ...pullRequests.slice(0, 10).map(pr => ({\n        type: 'pullrequest' as const,\n        title: pr.title,\n        author: pr.createdByName,\n        date: pr.creationDate,\n        url: pr.url || ''\n      }))\n    ].sort((a, b) => b.date.getTime() - a.date.getTime()).slice(0, 20);\n\n    return {\n      totalCommits: commits.length,\n      totalBranches: branchesResponse.count,\n      totalPullRequests: pullRequests.length,\n      recentActivity\n    };\n  }\n}\n\n// Demo data generator for when PAT token is not available\nexport function generateDemoData(organization: string, project: string) {\n  const repositories = [\n    {\n      id: \"demo-repo-1\",\n      name: \"LifeSafety.ai-Frontend\",\n      projectId: \"demo-project-1\",\n      projectName: project,\n      organization,\n      defaultBranch: \"refs/heads/main\",\n      size: 15728640,\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Frontend\",\n      webUrl: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Frontend\",\n      createdDate: new Date(\"2024-01-15T10:00:00Z\"),\n      lastUpdated: new Date()\n    },\n    {\n      id: \"demo-repo-2\", \n      name: \"LifeSafety.ai-Backend\",\n      projectId: \"demo-project-1\",\n      projectName: project,\n      organization,\n      defaultBranch: \"refs/heads/main\",\n      size: 8945123,\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Backend\",\n      webUrl: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Backend\",\n      createdDate: new Date(\"2024-01-10T08:30:00Z\"),\n      lastUpdated: new Date()\n    }\n  ];\n\n  const workItems = [\n    {\n      id: 1001,\n      rev: 12,\n      projectName: project,\n      areaPath: `${project}\\\\AI Models`,\n      iterationPath: `${project}\\\\Sprint 68`,\n      workItemType: \"User Story\",\n      state: \"Active\",\n      reason: \"Implementation started\",\n      title: \"Implement real-time hazard detection using computer vision\",\n      assignedToName: \"Sarah Johnson\",\n      assignedToEmail: \"sarah.johnson@podtech.io\",\n      assignedToImageUrl: null,\n      createdDate: new Date(\"2024-09-30T09:15:00Z\"),\n      createdByName: \"Mike Chen\",\n      createdByEmail: \"mike.chen@podtech.io\", \n      changedDate: new Date(\"2024-10-08T14:30:00Z\"),\n      description: \"Develop computer vision models to detect potential safety hazards in real-time from camera feeds\",\n      acceptanceCriteria: \"1. Model accuracy > 95%\\n2. Real-time processing < 100ms\\n3. Integration with alert system\",\n      storyPoints: 13,\n      priority: 1,\n      severity: \"High\",\n      tags: [\"AI\", \"Computer Vision\", \"Safety\"],\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_workitems/edit/1001\",\n      lastUpdated: new Date()\n    },\n    {\n      id: 1002,\n      rev: 8,\n      projectName: project,\n      areaPath: `${project}\\\\Dashboard`,\n      iterationPath: `${project}\\\\Sprint 68`,\n      workItemType: \"Task\",\n      state: \"Done\",\n      reason: \"Completed\",\n      title: \"Create Azure DevOps metrics dashboard\",\n      assignedToName: \"Alex Rodriguez\",\n      assignedToEmail: \"alex.rodriguez@podtech.io\",\n      assignedToImageUrl: null,\n      createdDate: new Date(\"2024-09-28T11:00:00Z\"),\n      createdByName: \"Emily Davis\",\n      createdByEmail: \"emily.davis@podtech.io\",\n      changedDate: new Date(\"2024-10-09T16:45:00Z\"),\n      description: \"Build a comprehensive dashboard showing project metrics and team performance\",\n      acceptanceCriteria: \"1. Display work items, commits, PRs\\n2. Real-time data sync\\n3. Responsive design\",\n      storyPoints: 8,\n      priority: 2,\n      severity: \"Medium\",\n      tags: [\"Dashboard\", \"Analytics\", \"UI\"],\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_workitems/edit/1002\",\n      lastUpdated: new Date()\n    },\n    {\n      id: 1003,\n      rev: 5,\n      projectName: project,\n      areaPath: `${project}\\\\Infrastructure`,\n      iterationPath: `${project}\\\\Sprint 68`,\n      workItemType: \"Bug\",\n      state: \"New\",\n      reason: \"Reported by QA\",\n      title: \"Database connection timeouts in production\",\n      assignedToName: \"David Kim\",\n      assignedToEmail: \"david.kim@podtech.io\",\n      assignedToImageUrl: null,\n      createdDate: new Date(\"2024-10-07T13:20:00Z\"),\n      createdByName: \"QA Team\",\n      createdByEmail: \"qa@podtech.io\",\n      changedDate: new Date(\"2024-10-09T10:15:00Z\"),\n      description: \"Users experiencing intermittent database connection timeouts during peak hours\",\n      acceptanceCriteria: \"1. Identify root cause\\n2. Implement fix\\n3. Load test to verify\",\n      storyPoints: 5,\n      priority: 1,\n      severity: \"Critical\",\n      tags: [\"Database\", \"Performance\", \"Production\"],\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_workitems/edit/1003\",\n      lastUpdated: new Date()\n    }\n  ];\n\n  const commits = [\n    {\n      id: \"demo-repo-1-abc123\",\n      commitId: \"abc123def456\",\n      repositoryId: \"demo-repo-1\",\n      authorName: \"Sarah Johnson\",\n      authorEmail: \"sarah.johnson@podtech.io\",\n      authorDate: new Date(\"2024-10-09T15:30:00Z\"),\n      committerName: \"Sarah Johnson\",\n      committerEmail: \"sarah.johnson@podtech.io\",\n      committerDate: new Date(\"2024-10-09T15:30:00Z\"),\n      comment: \"feat: implement hazard detection model training pipeline\",\n      commentTruncated: false,\n      changeCounts: { Add: 15, Edit: 3, Delete: 1 },\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Frontend/commit/abc123def456\",\n      remoteUrl: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Frontend\",\n      lastUpdated: new Date()\n    },\n    {\n      id: \"demo-repo-2-def789\",\n      commitId: \"def789ghi012\",\n      repositoryId: \"demo-repo-2\",\n      authorName: \"Alex Rodriguez\",\n      authorEmail: \"alex.rodriguez@podtech.io\",\n      authorDate: new Date(\"2024-10-09T14:15:00Z\"),\n      committerName: \"Alex Rodriguez\",\n      committerEmail: \"alex.rodriguez@podtech.io\",\n      committerDate: new Date(\"2024-10-09T14:15:00Z\"),\n      comment: \"fix: optimize database connection pooling\",\n      commentTruncated: false,\n      changeCounts: { Add: 8, Edit: 12, Delete: 4 },\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Backend/commit/def789ghi012\",\n      remoteUrl: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Backend\",\n      lastUpdated: new Date()\n    }\n  ];\n\n  const pullRequests = [\n    {\n      id: 2001,\n      repositoryId: \"demo-repo-1\",\n      pullRequestId: 42,\n      codeReviewId: 1542,\n      status: \"active\",\n      title: \"Add computer vision hazard detection models\",\n      description: \"This PR implements the core computer vision models for real-time hazard detection\",\n      sourceRefName: \"refs/heads/feature/hazard-detection\",\n      targetRefName: \"refs/heads/main\",\n      mergeStatus: \"succeeded\",\n      isDraft: false,\n      createdByName: \"Sarah Johnson\",\n      createdByEmail: \"sarah.johnson@podtech.io\",\n      createdByImageUrl: null,\n      creationDate: new Date(\"2024-10-08T10:30:00Z\"),\n      reviewers: [\n        {\n          displayName: \"Mike Chen\",\n          email: \"mike.chen@podtech.io\",\n          imageUrl: null,\n          vote: \"approved\" as const,\n          isRequired: true\n        },\n        {\n          displayName: \"Emily Davis\",\n          email: \"emily.davis@podtech.io\", \n          imageUrl: null,\n          vote: \"waiting\" as const,\n          isRequired: false\n        }\n      ],\n      workItemIds: [1001],\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/LifeSafety.ai-Frontend/pullrequest/42\",\n      lastUpdated: new Date()\n    }\n  ];\n\n  const teamMembers = [\n    {\n      id: \"member-1\",\n      displayName: \"Sarah Johnson\",\n      email: \"sarah.johnson@podtech.io\",\n      uniqueName: \"sarah.johnson@podtech.io\",\n      imageUrl: null,\n      projectName: project,\n      organization,\n      lastUpdated: new Date()\n    },\n    {\n      id: \"member-2\", \n      displayName: \"Alex Rodriguez\",\n      email: \"alex.rodriguez@podtech.io\",\n      uniqueName: \"alex.rodriguez@podtech.io\",\n      imageUrl: null,\n      projectName: project,\n      organization,\n      lastUpdated: new Date()\n    },\n    {\n      id: \"member-3\",\n      displayName: \"Mike Chen\", \n      email: \"mike.chen@podtech.io\",\n      uniqueName: \"mike.chen@podtech.io\",\n      imageUrl: null,\n      projectName: project,\n      organization,\n      lastUpdated: new Date()\n    }\n  ];\n\n  const sprints = [\n    {\n      id: \"sprint-68\",\n      name: \"Sprint 68\",\n      path: `${project}\\\\Sprint 68`,\n      projectName: project,\n      organization,\n      startDate: new Date(\"2024-09-30T00:00:00Z\"),\n      finishDate: new Date(\"2024-10-13T23:59:59Z\"),\n      state: \"current\",\n      attributes: {\n        startDate: \"2024-09-30T00:00:00Z\",\n        finishDate: \"2024-10-13T23:59:59Z\"\n      },\n      lastUpdated: new Date()\n    }\n  ];\n\n  return {\n    repositories,\n    workItems,\n    commits,\n    pullRequests,\n    teamMembers,\n    sprints\n  };\n}\n\n// Export factory function\nexport function createAzureDevOpsService(organization: string, project: string, pat: string): AzureDevOpsService {\n  return new AzureDevOpsService(organization, project, pat);\n}","size_bytes":24952},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { createAzureDevOpsService, generateDemoData } from \"./azure-devops-service\";\nimport { z } from \"zod\";\n\n// Validation schemas\nconst organizationProjectSchema = z.object({\n  organization: z.string(),\n  project: z.string()\n});\n\nconst repositoryParamsSchema = z.object({\n  repositoryId: z.string()\n});\n\nconst syncParamsSchema = organizationProjectSchema.extend({\n  force: z.boolean().optional().default(false)\n});\n\nconst commitsQuerySchema = z.object({\n  repositoryId: z.string(),\n  days: z.coerce.number().optional().default(30),\n  limit: z.coerce.number().optional().default(100)\n});\n\nconst workItemsQuerySchema = z.object({\n  projectName: z.string(),\n  iterationPath: z.string().optional()\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const organization = \"podtech-io\";\n  const project = \"WLS\";\n  const envPat = process.env.AZURE_DEVOPS_PAT_TOKEN;\n\n  if (!envPat) {\n    console.warn(\"AZURE_DEVOPS_PAT_TOKEN environment variable is not set. Azure DevOps sync will be disabled.\");\n  }\n\n  // Helper function to get PAT token from request header or environment\n  const getPatToken = (req: any): string | null => {\n    const headerToken = req.headers['x-azure-devops-pat'];\n    return headerToken || envPat || null;\n  };\n\n  // Helper function to create service for a request\n  const getAzureDevOpsService = (req: any) => {\n    const pat = getPatToken(req);\n    return pat ? createAzureDevOpsService(organization, project, pat) : null;\n  };\n\n  // Utility function to check cache freshness (5 minutes)\n  const isCacheStale = async (entity: string, org: string, proj: string): Promise<boolean> => {\n    const lastUpdate = await storage.getLastCacheUpdate(entity, org, proj);\n    if (!lastUpdate) return true;\n    \n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n    return lastUpdate < fiveMinutesAgo;\n  };\n\n  // Dashboard Data - Aggregated endpoint\n  app.get(\"/api/dashboard\", async (req, res) => {\n    try {\n      const query = organizationProjectSchema.parse({\n        organization: req.query.organization || organization,\n        project: req.query.project || project\n      });\n\n      // Get cached data or fetch fresh data\n      const [repositories, workItems, sprints] = await Promise.all([\n        storage.getRepositories(query.organization, query.project),\n        storage.getWorkItems(query.project),\n        storage.getSprints(query.organization, query.project)\n      ]);\n\n      // If no data in cache, trigger sync\n      const azureDevOpsService = getAzureDevOpsService(req);\n      if (repositories.length === 0 && azureDevOpsService) {\n        try {\n          const freshRepos = await azureDevOpsService.getRepositories();\n          await storage.upsertRepository(freshRepos[0]);\n          await storage.updateCacheTimestamp('repositories', query.organization, query.project);\n        } catch (error) {\n          console.warn(\"Failed to fetch repositories:\", error);\n        }\n      }\n\n      // Get work item analytics\n      const workItemStats = await storage.getWorkItemStats(query.project);\n      \n      // Get current sprint\n      const currentSprint = await storage.getCurrentSprint(query.organization, query.project);\n\n      // Build dashboard response\n      const dashboardData = {\n        organization: query.organization,\n        project: query.project,\n        metrics: {\n          totalWorkItems: workItemStats.totalWorkItems,\n          completedWorkItems: workItemStats.completedWorkItems,\n          inProgressWorkItems: workItemStats.inProgressWorkItems,\n          blockedWorkItems: workItemStats.blockedWorkItems,\n          totalRepositories: repositories.length,\n          totalSprints: sprints.length\n        },\n        currentSprint,\n        workItemsByType: workItemStats.workItemsByType,\n        workItemsByState: workItemStats.workItemsByState,\n        recentWorkItems: workItems.slice(0, 10),\n        repositories: repositories.slice(0, 5)\n      };\n\n      res.json(dashboardData);\n    } catch (error) {\n      console.error(\"Dashboard API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Repositories\n  app.get(\"/api/repositories\", async (req, res) => {\n    try {\n      const query = organizationProjectSchema.parse({\n        organization: req.query.organization || organization,\n        project: req.query.project || project\n      });\n\n      const repositories = await storage.getRepositories(query.organization, query.project);\n      res.json(repositories);\n    } catch (error) {\n      console.error(\"Repositories API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch repositories\" });\n    }\n  });\n\n  // Commits and Commit Analytics\n  app.get(\"/api/commits\", async (req, res) => {\n    try {\n      const query = commitsQuerySchema.parse(req.query);\n      \n      const commits = await storage.getCommits(query.repositoryId, query.limit);\n      res.json(commits);\n    } catch (error) {\n      console.error(\"Commits API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch commits\" });\n    }\n  });\n\n  app.get(\"/api/commits/analytics/:repositoryId\", async (req, res) => {\n    try {\n      const { repositoryId } = repositoryParamsSchema.parse(req.params);\n      const days = req.query.days ? parseInt(req.query.days as string) : 30;\n      \n      // Get analytics from both service and storage\n      const azureDevOpsService = getAzureDevOpsService(req);\n      const [commitStats, commitAnalytics] = await Promise.all([\n        storage.getCommitStats(repositoryId, days),\n        azureDevOpsService ? azureDevOpsService.getCommitAnalytics(repositoryId, days).catch(() => null) : Promise.resolve(null)\n      ]);\n\n      // Combine data from both sources\n      const analytics = commitAnalytics || {\n        totalCommits: commitStats.totalCommits,\n        contributorsCount: commitStats.uniqueContributors,\n        topContributors: commitStats.topContributors.map(c => ({\n          name: c.authorName,\n          email: c.authorEmail,\n          commitCount: c.commitCount,\n          linesAdded: 0,\n          linesDeleted: 0\n        })),\n        commitsByDay: [],\n        recentCommits: []\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Commit analytics API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch commit analytics\" });\n    }\n  });\n\n  // Work Items\n  app.get(\"/api/work-items\", async (req, res) => {\n    try {\n      const query = workItemsQuerySchema.parse({\n        projectName: req.query.projectName || project,\n        iterationPath: req.query.iterationPath\n      });\n\n      const workItems = await storage.getWorkItems(query.projectName, query.iterationPath);\n      res.json(workItems);\n    } catch (error) {\n      console.error(\"Work items API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch work items\" });\n    }\n  });\n\n  app.get(\"/api/work-items/analytics\", async (req, res) => {\n    try {\n      const query = workItemsQuerySchema.parse({\n        projectName: req.query.projectName || project,\n        iterationPath: req.query.iterationPath\n      });\n\n      const analytics = await storage.getWorkItemStats(query.projectName, query.iterationPath);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Work item analytics API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch work item analytics\" });\n    }\n  });\n\n  // Pull Requests\n  app.get(\"/api/pull-requests/:repositoryId\", async (req, res) => {\n    try {\n      const { repositoryId } = repositoryParamsSchema.parse(req.params);\n      const status = req.query.status as string;\n\n      const pullRequests = await storage.getPullRequests(repositoryId, status);\n      res.json(pullRequests);\n    } catch (error) {\n      console.error(\"Pull requests API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch pull requests\" });\n    }\n  });\n\n  // Team Members\n  app.get(\"/api/team-members\", async (req, res) => {\n    try {\n      const query = organizationProjectSchema.parse({\n        organization: req.query.organization || organization,\n        project: req.query.project || project\n      });\n\n      const teamMembers = await storage.getTeamMembers(query.organization, query.project);\n      res.json(teamMembers);\n    } catch (error) {\n      console.error(\"Team members API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch team members\" });\n    }\n  });\n\n  // Sprints\n  app.get(\"/api/sprints\", async (req, res) => {\n    try {\n      const query = organizationProjectSchema.parse({\n        organization: req.query.organization || organization,\n        project: req.query.project || project\n      });\n\n      const sprints = await storage.getSprints(query.organization, query.project);\n      res.json(sprints);\n    } catch (error) {\n      console.error(\"Sprints API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch sprints\" });\n    }\n  });\n\n  app.get(\"/api/sprints/current\", async (req, res) => {\n    try {\n      const query = organizationProjectSchema.parse({\n        organization: req.query.organization || organization,\n        project: req.query.project || project\n      });\n\n      const currentSprint = await storage.getCurrentSprint(query.organization, query.project);\n      res.json(currentSprint || null);\n    } catch (error) {\n      console.error(\"Current sprint API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch current sprint\" });\n    }\n  });\n\n  // Repository Insights\n  app.get(\"/api/repository-insights/:repositoryId\", async (req, res) => {\n    try {\n      const { repositoryId } = repositoryParamsSchema.parse(req.params);\n      \n      const azureDevOpsService = getAzureDevOpsService(req);\n      if (!azureDevOpsService) {\n        return res.status(503).json({ error: \"Azure DevOps service not configured\" });\n      }\n      \n      const insights = await azureDevOpsService.getRepositoryInsights(repositoryId);\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Repository insights API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch repository insights\" });\n    }\n  });\n\n  // Data Synchronization\n  app.post(\"/api/sync\", async (req, res) => {\n    try {\n      const query = syncParamsSchema.parse({\n        organization: req.body.organization || organization,\n        project: req.body.project || project,\n        force: req.body.force\n      });\n\n      const azureDevOpsService = getAzureDevOpsService(req);\n      if (!azureDevOpsService) {\n        // Generate and populate demo data when PAT token is not available\n        console.log(`No PAT token available, populating demo data for ${query.organization}/${query.project}...`);\n        \n        const demoData = generateDemoData(query.organization, query.project);\n        \n        // Clear existing data first\n        await storage.clearCache(query.organization, query.project);\n        \n        // Insert demo data\n        await storage.upsertRepository(demoData.repositories[0]);\n        await storage.upsertRepository(demoData.repositories[1]);\n        await storage.upsertWorkItems(demoData.workItems);\n        await storage.upsertCommits(demoData.commits);\n        await storage.upsertPullRequests(demoData.pullRequests);\n        await storage.upsertTeamMembers(demoData.teamMembers);\n        await storage.upsertSprints(demoData.sprints);\n        \n        // Update cache timestamps\n        await storage.updateCacheTimestamp('repositories', query.organization, query.project);\n        await storage.updateCacheTimestamp('workItems', query.organization, query.project);\n        await storage.updateCacheTimestamp('commits', query.organization, query.project);\n        await storage.updateCacheTimestamp('pullRequests', query.organization, query.project);\n        await storage.updateCacheTimestamp('teamMembers', query.organization, query.project);\n        await storage.updateCacheTimestamp('sprints', query.organization, query.project);\n        \n        const syncResult = {\n          success: true,\n          message: \"Demo data populated successfully (Azure DevOps PAT token not configured)\",\n          syncedAt: new Date().toISOString(),\n          counts: {\n            repositories: demoData.repositories.length,\n            sprints: demoData.sprints.length,\n            workItems: demoData.workItems.length,\n            teamMembers: demoData.teamMembers.length,\n            commits: demoData.commits.length,\n            pullRequests: demoData.pullRequests.length\n          }\n        };\n        \n        console.log(\"Demo data sync completed:\", syncResult);\n        return res.json(syncResult);\n      }\n\n      // Check if sync is needed (unless forced)\n      if (!query.force) {\n        const needsSync = await isCacheStale('repositories', query.organization, query.project);\n        if (!needsSync) {\n          return res.json({ \n            message: \"Data is fresh, no sync needed\",\n            lastSync: await storage.getLastCacheUpdate('repositories', query.organization, query.project)\n          });\n        }\n      }\n\n      console.log(`Starting Azure DevOps sync for ${query.organization}/${query.project}...`);\n      \n      // Sync all data in parallel\n      const syncPromises = [];\n\n      // Sync repositories\n      syncPromises.push(\n        azureDevOpsService.getRepositories()\n          .then(async (repos) => {\n            for (const repo of repos) {\n              await storage.upsertRepository(repo);\n            }\n            await storage.updateCacheTimestamp('repositories', query.organization, query.project);\n            return repos.length;\n          })\n          .catch(error => {\n            console.error(\"Failed to sync repositories:\", error);\n            return 0;\n          })\n      );\n\n      // Sync sprints\n      syncPromises.push(\n        azureDevOpsService.getSprints()\n          .then(async (sprints) => {\n            await storage.upsertSprints(sprints.map(s => ({ \n              ...s, \n              attributes: s.attributes as any \n            })));\n            await storage.updateCacheTimestamp('sprints', query.organization, query.project);\n            return sprints.length;\n          })\n          .catch(error => {\n            console.error(\"Failed to sync sprints:\", error);\n            return 0;\n          })\n      );\n\n      // Sync work items\n      syncPromises.push(\n        azureDevOpsService.getWorkItems()\n          .then(async (workItems) => {\n            await storage.upsertWorkItems(workItems);\n            await storage.updateCacheTimestamp('workItems', query.organization, query.project);\n            return workItems.length;\n          })\n          .catch(error => {\n            console.error(\"Failed to sync work items:\", error);\n            return 0;\n          })\n      );\n\n      // Sync team members\n      syncPromises.push(\n        azureDevOpsService.getTeamMembers()\n          .then(async (members) => {\n            if (members.length > 0) {\n              await storage.upsertTeamMembers(members);\n              await storage.updateCacheTimestamp('teamMembers', query.organization, query.project);\n            }\n            return members.length;\n          })\n          .catch(error => {\n            console.error(\"Failed to sync team members:\", error);\n            return 0;\n          })\n      );\n\n      const [repoCount, sprintCount, workItemCount, memberCount] = await Promise.all(syncPromises);\n\n      // Sync commits for each repository\n      const repositories = await storage.getRepositories(query.organization, query.project);\n      let totalCommits = 0;\n      \n      for (const repo of repositories) {\n        try {\n          const commits = await azureDevOpsService.getCommits(repo.id, 100);\n          if (commits.length > 0) {\n            await storage.upsertCommits(commits);\n            totalCommits += commits.length;\n          }\n        } catch (error) {\n          console.error(`Failed to sync commits for repository ${repo.id}:`, error);\n        }\n      }\n\n      await storage.updateCacheTimestamp('commits', query.organization, query.project);\n\n      const syncResult = {\n        success: true,\n        message: \"Data synchronization completed\",\n        syncedAt: new Date().toISOString(),\n        counts: {\n          repositories: repoCount,\n          sprints: sprintCount,\n          workItems: workItemCount,\n          teamMembers: memberCount,\n          commits: totalCommits\n        }\n      };\n\n      console.log(\"Sync completed:\", syncResult);\n      res.json(syncResult);\n    } catch (error) {\n      console.error(\"Sync API error:\", error);\n      res.status(500).json({ error: \"Data synchronization failed\" });\n    }\n  });\n\n  // Clear Cache\n  app.delete(\"/api/cache\", async (req, res) => {\n    try {\n      const query = organizationProjectSchema.parse({\n        organization: req.query.organization || organization,\n        project: req.query.project || project\n      });\n\n      await storage.clearCache(query.organization, query.project);\n      res.json({ message: \"Cache cleared successfully\" });\n    } catch (error) {\n      console.error(\"Clear cache API error:\", error);\n      res.status(500).json({ error: \"Failed to clear cache\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17366},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Repository,\n  type InsertRepository,\n  type Commit,\n  type InsertCommit,\n  type WorkItem,\n  type InsertWorkItem,\n  type PullRequest,\n  type InsertPullRequest,\n  type TeamMember,\n  type InsertTeamMember,\n  type Sprint,\n  type InsertSprint\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Repository methods\n  getRepositories(organization: string, project: string): Promise<Repository[]>;\n  upsertRepository(repository: InsertRepository): Promise<Repository>;\n  getRepository(id: string): Promise<Repository | undefined>;\n\n  // Commit methods\n  getCommits(repositoryId: string, limit?: number): Promise<Commit[]>;\n  upsertCommits(commits: InsertCommit[]): Promise<Commit[]>;\n  getCommitsByDateRange(repositoryId: string, startDate: Date, endDate: Date): Promise<Commit[]>;\n  getCommitStats(repositoryId: string, days?: number): Promise<{\n    totalCommits: number;\n    uniqueContributors: number;\n    topContributors: Array<{\n      authorName: string;\n      authorEmail: string;\n      commitCount: number;\n    }>;\n  }>;\n\n  // Work Item methods\n  getWorkItems(projectName: string, iterationPath?: string): Promise<WorkItem[]>;\n  upsertWorkItems(workItems: InsertWorkItem[]): Promise<WorkItem[]>;\n  getWorkItem(id: number): Promise<WorkItem | undefined>;\n  getWorkItemStats(projectName: string, iterationPath?: string): Promise<{\n    totalWorkItems: number;\n    completedWorkItems: number;\n    inProgressWorkItems: number;\n    blockedWorkItems: number;\n    workItemsByType: Array<{ type: string; count: number }>;\n    workItemsByState: Array<{ state: string; count: number }>;\n  }>;\n\n  // Pull Request methods\n  getPullRequests(repositoryId: string, status?: string): Promise<PullRequest[]>;\n  upsertPullRequests(pullRequests: InsertPullRequest[]): Promise<PullRequest[]>;\n  getPullRequest(id: number): Promise<PullRequest | undefined>;\n\n  // Team Member methods\n  getTeamMembers(organization: string, project: string): Promise<TeamMember[]>;\n  upsertTeamMembers(teamMembers: InsertTeamMember[]): Promise<TeamMember[]>;\n  getTeamMember(id: string): Promise<TeamMember | undefined>;\n\n  // Sprint methods\n  getSprints(organization: string, project: string): Promise<Sprint[]>;\n  upsertSprints(sprints: InsertSprint[]): Promise<Sprint[]>;\n  getSprint(id: string): Promise<Sprint | undefined>;\n  getCurrentSprint(organization: string, project: string): Promise<Sprint | undefined>;\n\n  // Cache management\n  clearCache(organization: string, project: string): Promise<void>;\n  getLastCacheUpdate(entity: string, organization: string, project: string): Promise<Date | undefined>;\n  updateCacheTimestamp(entity: string, organization: string, project: string): Promise<void>;\n}\n\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport { eq, and, gte, lte, desc, sql, count } from \"drizzle-orm\";\nimport postgres from \"postgres\";\nimport { \n  users, \n  repositories, \n  commits, \n  workItems, \n  pullRequests, \n  teamMembers, \n  sprints \n} from \"@shared/schema\";\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client);\n\nexport class DbStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    await db.insert(users).values(user);\n    return user;\n  }\n\n  // Repository methods\n  async getRepositories(organization: string, project: string): Promise<Repository[]> {\n    return await db.select().from(repositories)\n      .where(and(eq(repositories.organization, organization), eq(repositories.projectName, project)))\n      .orderBy(desc(repositories.lastUpdated));\n  }\n\n  async upsertRepository(repository: InsertRepository): Promise<Repository> {\n    const existing = await db.select().from(repositories).where(eq(repositories.id, repository.id)).limit(1);\n    \n    if (existing.length > 0) {\n      await db.update(repositories)\n        .set({ ...repository, lastUpdated: new Date() })\n        .where(eq(repositories.id, repository.id));\n    } else {\n      await db.insert(repositories).values({ ...repository, lastUpdated: new Date() });\n    }\n    \n    const result = await db.select().from(repositories).where(eq(repositories.id, repository.id)).limit(1);\n    return result[0];\n  }\n\n  async getRepository(id: string): Promise<Repository | undefined> {\n    const result = await db.select().from(repositories).where(eq(repositories.id, id)).limit(1);\n    return result[0];\n  }\n\n  // Commit methods\n  async getCommits(repositoryId: string, limit = 100): Promise<Commit[]> {\n    return await db.select().from(commits)\n      .where(eq(commits.repositoryId, repositoryId))\n      .orderBy(desc(commits.authorDate))\n      .limit(limit);\n  }\n\n  async upsertCommits(commitsData: InsertCommit[]): Promise<Commit[]> {\n    const results: Commit[] = [];\n    \n    for (const commitData of commitsData) {\n      const existing = await db.select().from(commits).where(eq(commits.id, commitData.id)).limit(1);\n      \n      if (existing.length > 0) {\n        await db.update(commits)\n          .set({ ...commitData, lastUpdated: new Date() })\n          .where(eq(commits.id, commitData.id));\n      } else {\n        await db.insert(commits).values({ ...commitData, lastUpdated: new Date() });\n      }\n      \n      const result = await db.select().from(commits).where(eq(commits.id, commitData.id)).limit(1);\n      if (result[0]) results.push(result[0]);\n    }\n    \n    return results;\n  }\n\n  async getCommitsByDateRange(repositoryId: string, startDate: Date, endDate: Date): Promise<Commit[]> {\n    return await db.select().from(commits)\n      .where(and(\n        eq(commits.repositoryId, repositoryId),\n        gte(commits.authorDate, startDate),\n        lte(commits.authorDate, endDate)\n      ))\n      .orderBy(desc(commits.authorDate));\n  }\n\n  async getCommitStats(repositoryId: string, days = 30): Promise<{\n    totalCommits: number;\n    uniqueContributors: number;\n    topContributors: Array<{\n      authorName: string;\n      authorEmail: string;\n      commitCount: number;\n    }>;\n  }> {\n    const since = new Date();\n    since.setDate(since.getDate() - days);\n\n    // Get total commits\n    const totalResult = await db.select({ count: count() }).from(commits)\n      .where(and(eq(commits.repositoryId, repositoryId), gte(commits.authorDate, since)));\n    \n    // Get contributor stats\n    const contributorStats = await db.select({\n      authorName: commits.authorName,\n      authorEmail: commits.authorEmail,\n      commitCount: count()\n    }).from(commits)\n      .where(and(eq(commits.repositoryId, repositoryId), gte(commits.authorDate, since)))\n      .groupBy(commits.authorName, commits.authorEmail)\n      .orderBy(desc(count()))\n      .limit(10);\n\n    return {\n      totalCommits: totalResult[0]?.count || 0,\n      uniqueContributors: contributorStats.length,\n      topContributors: contributorStats\n    };\n  }\n\n  // Work Item methods\n  async getWorkItems(projectName: string, iterationPath?: string): Promise<WorkItem[]> {\n    if (iterationPath) {\n      return await db.select().from(workItems)\n        .where(and(eq(workItems.projectName, projectName), eq(workItems.iterationPath, iterationPath)))\n        .orderBy(desc(workItems.createdDate));\n    }\n    \n    return await db.select().from(workItems)\n      .where(eq(workItems.projectName, projectName))\n      .orderBy(desc(workItems.createdDate));\n  }\n\n  async upsertWorkItems(workItemsData: InsertWorkItem[]): Promise<WorkItem[]> {\n    const results: WorkItem[] = [];\n    \n    for (const workItemData of workItemsData) {\n      const existing = await db.select().from(workItems).where(eq(workItems.id, workItemData.id)).limit(1);\n      \n      if (existing.length > 0) {\n        await db.update(workItems)\n          .set({ ...workItemData, lastUpdated: new Date() })\n          .where(eq(workItems.id, workItemData.id));\n      } else {\n        await db.insert(workItems).values({ ...workItemData, lastUpdated: new Date() });\n      }\n      \n      const result = await db.select().from(workItems).where(eq(workItems.id, workItemData.id)).limit(1);\n      if (result[0]) results.push(result[0]);\n    }\n    \n    return results;\n  }\n\n  async getWorkItem(id: number): Promise<WorkItem | undefined> {\n    const result = await db.select().from(workItems).where(eq(workItems.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getWorkItemStats(projectName: string, iterationPath?: string): Promise<{\n    totalWorkItems: number;\n    completedWorkItems: number;\n    inProgressWorkItems: number;\n    blockedWorkItems: number;\n    workItemsByType: Array<{ type: string; count: number }>;\n    workItemsByState: Array<{ state: string; count: number }>;\n  }> {\n    // Get all work items for analysis\n    const allWorkItems = iterationPath\n      ? await db.select().from(workItems)\n          .where(and(eq(workItems.projectName, projectName), eq(workItems.iterationPath, iterationPath)))\n      : await db.select().from(workItems)\n          .where(eq(workItems.projectName, projectName));\n    \n    // Calculate stats\n    const totalWorkItems = allWorkItems.length;\n    let completedWorkItems = 0;\n    let inProgressWorkItems = 0;\n    let blockedWorkItems = 0;\n    \n    const typeMap = new Map<string, number>();\n    const stateMap = new Map<string, number>();\n    \n    for (const wi of allWorkItems) {\n      // Count by type\n      typeMap.set(wi.workItemType, (typeMap.get(wi.workItemType) || 0) + 1);\n      \n      // Count by state\n      stateMap.set(wi.state, (stateMap.get(wi.state) || 0) + 1);\n      \n      // Count by status categories\n      const state = wi.state.toLowerCase();\n      if (state.includes('done') || state.includes('closed') || state.includes('resolved')) {\n        completedWorkItems++;\n      } else if (state.includes('active') || state.includes('progress') || state.includes('committed')) {\n        inProgressWorkItems++;\n      } else if (state.includes('blocked') || state.includes('removed')) {\n        blockedWorkItems++;\n      }\n    }\n\n    return {\n      totalWorkItems,\n      completedWorkItems,\n      inProgressWorkItems,\n      blockedWorkItems,\n      workItemsByType: Array.from(typeMap.entries()).map(([type, count]) => ({ type, count })),\n      workItemsByState: Array.from(stateMap.entries()).map(([state, count]) => ({ state, count }))\n    };\n  }\n\n  // Pull Request methods\n  async getPullRequests(repositoryId: string, status?: string): Promise<PullRequest[]> {\n    if (status && status !== 'all') {\n      return await db.select().from(pullRequests)\n        .where(and(eq(pullRequests.repositoryId, repositoryId), eq(pullRequests.status, status)))\n        .orderBy(desc(pullRequests.creationDate));\n    }\n    \n    return await db.select().from(pullRequests)\n      .where(eq(pullRequests.repositoryId, repositoryId))\n      .orderBy(desc(pullRequests.creationDate));\n  }\n\n  async upsertPullRequests(pullRequestsData: InsertPullRequest[]): Promise<PullRequest[]> {\n    const results: PullRequest[] = [];\n    \n    for (const prData of pullRequestsData) {\n      const existing = await db.select().from(pullRequests).where(eq(pullRequests.id, prData.id)).limit(1);\n      \n      if (existing.length > 0) {\n        await db.update(pullRequests)\n          .set({ ...prData, lastUpdated: new Date(), reviewers: prData.reviewers as any || null })\n          .where(eq(pullRequests.id, prData.id));\n      } else {\n        await db.insert(pullRequests).values({ \n          ...prData, \n          lastUpdated: new Date(),\n          reviewers: prData.reviewers as any || null,\n          workItemIds: prData.workItemIds || null\n        });\n      }\n      \n      const result = await db.select().from(pullRequests).where(eq(pullRequests.id, prData.id)).limit(1);\n      if (result[0]) results.push(result[0]);\n    }\n    \n    return results;\n  }\n\n  async getPullRequest(id: number): Promise<PullRequest | undefined> {\n    const result = await db.select().from(pullRequests).where(eq(pullRequests.id, id)).limit(1);\n    return result[0];\n  }\n\n  // Team Member methods\n  async getTeamMembers(organization: string, project: string): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers)\n      .where(and(eq(teamMembers.organization, organization), eq(teamMembers.projectName, project)))\n      .orderBy(desc(teamMembers.lastUpdated));\n  }\n\n  async upsertTeamMembers(teamMembersData: InsertTeamMember[]): Promise<TeamMember[]> {\n    const results: TeamMember[] = [];\n    \n    for (const memberData of teamMembersData) {\n      const existing = await db.select().from(teamMembers).where(eq(teamMembers.id, memberData.id)).limit(1);\n      \n      if (existing.length > 0) {\n        await db.update(teamMembers)\n          .set({ ...memberData, lastUpdated: new Date() })\n          .where(eq(teamMembers.id, memberData.id));\n      } else {\n        await db.insert(teamMembers).values({ ...memberData, lastUpdated: new Date() });\n      }\n      \n      const result = await db.select().from(teamMembers).where(eq(teamMembers.id, memberData.id)).limit(1);\n      if (result[0]) results.push(result[0]);\n    }\n    \n    return results;\n  }\n\n  async getTeamMember(id: string): Promise<TeamMember | undefined> {\n    const result = await db.select().from(teamMembers).where(eq(teamMembers.id, id)).limit(1);\n    return result[0];\n  }\n\n  // Sprint methods\n  async getSprints(organization: string, project: string): Promise<Sprint[]> {\n    return await db.select().from(sprints)\n      .where(and(eq(sprints.organization, organization), eq(sprints.projectName, project)))\n      .orderBy(desc(sprints.startDate));\n  }\n\n  async upsertSprints(sprintsData: InsertSprint[]): Promise<Sprint[]> {\n    const results: Sprint[] = [];\n    \n    for (const sprintData of sprintsData) {\n      const existing = await db.select().from(sprints).where(eq(sprints.id, sprintData.id)).limit(1);\n      \n      if (existing.length > 0) {\n        await db.update(sprints)\n          .set({ ...sprintData, lastUpdated: new Date() })\n          .where(eq(sprints.id, sprintData.id));\n      } else {\n        await db.insert(sprints).values({ ...sprintData, lastUpdated: new Date() });\n      }\n      \n      const result = await db.select().from(sprints).where(eq(sprints.id, sprintData.id)).limit(1);\n      if (result[0]) results.push(result[0]);\n    }\n    \n    return results;\n  }\n\n  async getSprint(id: string): Promise<Sprint | undefined> {\n    const result = await db.select().from(sprints).where(eq(sprints.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getCurrentSprint(organization: string, project: string): Promise<Sprint | undefined> {\n    const now = new Date();\n    const result = await db.select().from(sprints)\n      .where(and(\n        eq(sprints.organization, organization),\n        eq(sprints.projectName, project),\n        lte(sprints.startDate, now),\n        gte(sprints.finishDate, now)\n      ))\n      .limit(1);\n    return result[0];\n  }\n\n  // Cache management\n  private cacheTimestamps = new Map<string, Date>();\n\n  async clearCache(organization: string, project: string): Promise<void> {\n    // Clear data for the specific organization/project\n    await db.delete(repositories).where(and(eq(repositories.organization, organization), eq(repositories.projectName, project)));\n    await db.delete(commits);  // Commits are linked via repositoryId, so we need to be careful here\n    await db.delete(workItems).where(eq(workItems.projectName, project));\n    await db.delete(pullRequests); // Similar to commits\n    await db.delete(teamMembers).where(and(eq(teamMembers.organization, organization), eq(teamMembers.projectName, project)));\n    await db.delete(sprints).where(and(eq(sprints.organization, organization), eq(sprints.projectName, project)));\n    \n    // Clear cache timestamps\n    const cacheKey = `${organization}:${project}`;\n    this.cacheTimestamps.delete(cacheKey);\n  }\n\n  async getLastCacheUpdate(entity: string, organization: string, project: string): Promise<Date | undefined> {\n    const cacheKey = `${entity}:${organization}:${project}`;\n    return this.cacheTimestamps.get(cacheKey);\n  }\n\n  async updateCacheTimestamp(entity: string, organization: string, project: string): Promise<void> {\n    const cacheKey = `${entity}:${organization}:${project}`;\n    this.cacheTimestamps.set(cacheKey, new Date());\n  }\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private repositories: Map<string, Repository>;\n  private commits: Map<string, Commit>;\n  private workItems: Map<number, WorkItem>;\n  private pullRequests: Map<number, PullRequest>;\n  private teamMembers: Map<string, TeamMember>;\n  private sprints: Map<string, Sprint>;\n  private cacheTimestamps: Map<string, Date>;\n\n  constructor() {\n    this.users = new Map();\n    this.repositories = new Map();\n    this.commits = new Map();\n    this.workItems = new Map();\n    this.pullRequests = new Map();\n    this.teamMembers = new Map();\n    this.sprints = new Map();\n    this.cacheTimestamps = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Stub implementations for in-memory storage (not recommended for production)\n  async getRepositories(organization: string, project: string): Promise<Repository[]> {\n    return Array.from(this.repositories.values()).filter(\n      repo => repo.organization === organization && repo.projectName === project\n    );\n  }\n\n  async upsertRepository(repository: InsertRepository): Promise<Repository> {\n    const repo: Repository = { \n      ...repository, \n      lastUpdated: new Date(),\n      defaultBranch: repository.defaultBranch ?? null,\n      size: repository.size ?? null,\n      url: repository.url ?? null,\n      webUrl: repository.webUrl ?? null,\n      createdDate: repository.createdDate ?? null\n    };\n    this.repositories.set(repository.id, repo);\n    return repo;\n  }\n\n  async getRepository(id: string): Promise<Repository | undefined> {\n    return this.repositories.get(id);\n  }\n\n  async getCommits(repositoryId: string, limit = 100): Promise<Commit[]> {\n    return Array.from(this.commits.values())\n      .filter(commit => commit.repositoryId === repositoryId)\n      .sort((a, b) => b.authorDate.getTime() - a.authorDate.getTime())\n      .slice(0, limit);\n  }\n\n  async upsertCommits(commitsData: InsertCommit[]): Promise<Commit[]> {\n    const results: Commit[] = [];\n    for (const commitData of commitsData) {\n      const commit: Commit = { \n        ...commitData, \n        lastUpdated: new Date(),\n        url: commitData.url ?? null,\n        remoteUrl: commitData.remoteUrl ?? null,\n        commentTruncated: commitData.commentTruncated ?? null,\n        changeCounts: commitData.changeCounts ?? null\n      };\n      this.commits.set(commitData.id, commit);\n      results.push(commit);\n    }\n    return results;\n  }\n\n  async getCommitsByDateRange(repositoryId: string, startDate: Date, endDate: Date): Promise<Commit[]> {\n    return Array.from(this.commits.values())\n      .filter(commit => \n        commit.repositoryId === repositoryId &&\n        commit.authorDate >= startDate &&\n        commit.authorDate <= endDate\n      )\n      .sort((a, b) => b.authorDate.getTime() - a.authorDate.getTime());\n  }\n\n  async getCommitStats(repositoryId: string, days = 30): Promise<{\n    totalCommits: number;\n    uniqueContributors: number;\n    topContributors: Array<{\n      authorName: string;\n      authorEmail: string;\n      commitCount: number;\n    }>;\n  }> {\n    const since = new Date();\n    since.setDate(since.getDate() - days);\n    \n    const recentCommits = Array.from(this.commits.values())\n      .filter(commit => commit.repositoryId === repositoryId && commit.authorDate >= since);\n    \n    const contributorMap = new Map<string, { authorName: string; authorEmail: string; commitCount: number }>();\n    \n    for (const commit of recentCommits) {\n      const key = `${commit.authorName}:${commit.authorEmail}`;\n      if (!contributorMap.has(key)) {\n        contributorMap.set(key, {\n          authorName: commit.authorName,\n          authorEmail: commit.authorEmail,\n          commitCount: 0\n        });\n      }\n      contributorMap.get(key)!.commitCount++;\n    }\n    \n    const topContributors = Array.from(contributorMap.values())\n      .sort((a, b) => b.commitCount - a.commitCount)\n      .slice(0, 10);\n    \n    return {\n      totalCommits: recentCommits.length,\n      uniqueContributors: contributorMap.size,\n      topContributors\n    };\n  }\n\n  // Simplified implementations for other methods\n  async getWorkItems(projectName: string, iterationPath?: string): Promise<WorkItem[]> {\n    return Array.from(this.workItems.values()).filter(wi => \n      wi.projectName === projectName && (!iterationPath || wi.iterationPath === iterationPath)\n    );\n  }\n\n  async upsertWorkItems(workItemsData: InsertWorkItem[]): Promise<WorkItem[]> {\n    const results: WorkItem[] = [];\n    for (const wiData of workItemsData) {\n      const wi: WorkItem = { \n        ...wiData, \n        lastUpdated: new Date(),\n        url: wiData.url ?? null,\n        rev: wiData.rev ?? null,\n        areaPath: wiData.areaPath ?? null,\n        iterationPath: wiData.iterationPath ?? null,\n        reason: wiData.reason ?? null,\n        assignedToName: wiData.assignedToName ?? null,\n        assignedToEmail: wiData.assignedToEmail ?? null,\n        assignedToImageUrl: wiData.assignedToImageUrl ?? null,\n        createdByName: wiData.createdByName ?? null,\n        createdByEmail: wiData.createdByEmail ?? null,\n        changedDate: wiData.changedDate ?? null,\n        description: wiData.description ?? null,\n        acceptanceCriteria: wiData.acceptanceCriteria ?? null,\n        storyPoints: wiData.storyPoints ?? null,\n        priority: wiData.priority ?? null,\n        severity: wiData.severity ?? null,\n        tags: wiData.tags ?? null\n      };\n      this.workItems.set(wiData.id, wi);\n      results.push(wi);\n    }\n    return results;\n  }\n\n  async getWorkItem(id: number): Promise<WorkItem | undefined> {\n    return this.workItems.get(id);\n  }\n\n  async getWorkItemStats(projectName: string, iterationPath?: string): Promise<{\n    totalWorkItems: number;\n    completedWorkItems: number;\n    inProgressWorkItems: number;\n    blockedWorkItems: number;\n    workItemsByType: Array<{ type: string; count: number }>;\n    workItemsByState: Array<{ state: string; count: number }>;\n  }> {\n    const workItems = await this.getWorkItems(projectName, iterationPath);\n    \n    let completedWorkItems = 0;\n    let inProgressWorkItems = 0;\n    let blockedWorkItems = 0;\n    const typeMap = new Map<string, number>();\n    const stateMap = new Map<string, number>();\n    \n    for (const wi of workItems) {\n      typeMap.set(wi.workItemType, (typeMap.get(wi.workItemType) || 0) + 1);\n      stateMap.set(wi.state, (stateMap.get(wi.state) || 0) + 1);\n      \n      const state = wi.state.toLowerCase();\n      if (state.includes('done') || state.includes('closed') || state.includes('resolved')) {\n        completedWorkItems++;\n      } else if (state.includes('active') || state.includes('progress') || state.includes('committed')) {\n        inProgressWorkItems++;\n      } else if (state.includes('blocked') || state.includes('removed')) {\n        blockedWorkItems++;\n      }\n    }\n    \n    return {\n      totalWorkItems: workItems.length,\n      completedWorkItems,\n      inProgressWorkItems,\n      blockedWorkItems,\n      workItemsByType: Array.from(typeMap.entries()).map(([type, count]) => ({ type, count })),\n      workItemsByState: Array.from(stateMap.entries()).map(([state, count]) => ({ state, count }))\n    };\n  }\n\n  // Stub implementations for pull requests, team members, and sprints\n  async getPullRequests(repositoryId: string, status?: string): Promise<PullRequest[]> {\n    return Array.from(this.pullRequests.values()).filter(pr => \n      pr.repositoryId === repositoryId && (!status || status === 'all' || pr.status === status)\n    );\n  }\n\n  async upsertPullRequests(pullRequestsData: InsertPullRequest[]): Promise<PullRequest[]> {\n    const results: PullRequest[] = [];\n    for (const prData of pullRequestsData) {\n      const pr: PullRequest = { \n        ...prData, \n        lastUpdated: new Date(),\n        url: prData.url ?? null,\n        description: prData.description ?? null,\n        createdByEmail: prData.createdByEmail ?? null,\n        createdByImageUrl: prData.createdByImageUrl ?? null,\n        mergeStatus: prData.mergeStatus ?? null,\n        isDraft: prData.isDraft ?? null,\n        codeReviewId: prData.codeReviewId ?? null,\n        reviewers: (prData.reviewers as any) ?? null,\n        workItemIds: prData.workItemIds ?? null\n      };\n      this.pullRequests.set(prData.id, pr);\n      results.push(pr);\n    }\n    return results;\n  }\n\n  async getPullRequest(id: number): Promise<PullRequest | undefined> {\n    return this.pullRequests.get(id);\n  }\n\n  async getTeamMembers(organization: string, project: string): Promise<TeamMember[]> {\n    return Array.from(this.teamMembers.values()).filter(tm => \n      tm.organization === organization && tm.projectName === project\n    );\n  }\n\n  async upsertTeamMembers(teamMembersData: InsertTeamMember[]): Promise<TeamMember[]> {\n    const results: TeamMember[] = [];\n    for (const tmData of teamMembersData) {\n      const tm: TeamMember = { \n        ...tmData, \n        lastUpdated: new Date(),\n        email: tmData.email ?? null,\n        uniqueName: tmData.uniqueName ?? null,\n        imageUrl: tmData.imageUrl ?? null\n      };\n      this.teamMembers.set(tmData.id, tm);\n      results.push(tm);\n    }\n    return results;\n  }\n\n  async getTeamMember(id: string): Promise<TeamMember | undefined> {\n    return this.teamMembers.get(id);\n  }\n\n  async getSprints(organization: string, project: string): Promise<Sprint[]> {\n    return Array.from(this.sprints.values()).filter(s => \n      s.organization === organization && s.projectName === project\n    );\n  }\n\n  async upsertSprints(sprintsData: InsertSprint[]): Promise<Sprint[]> {\n    const results: Sprint[] = [];\n    for (const sprintData of sprintsData) {\n      const sprint: Sprint = { \n        ...sprintData, \n        lastUpdated: new Date(),\n        state: sprintData.state ?? null,\n        startDate: sprintData.startDate ?? null,\n        finishDate: sprintData.finishDate ?? null,\n        attributes: sprintData.attributes ?? null\n      };\n      this.sprints.set(sprintData.id, sprint);\n      results.push(sprint);\n    }\n    return results;\n  }\n\n  async getSprint(id: string): Promise<Sprint | undefined> {\n    return this.sprints.get(id);\n  }\n\n  async getCurrentSprint(organization: string, project: string): Promise<Sprint | undefined> {\n    const now = new Date();\n    return Array.from(this.sprints.values()).find(s => \n      s.organization === organization && \n      s.projectName === project &&\n      s.startDate && s.finishDate &&\n      s.startDate <= now && s.finishDate >= now\n    );\n  }\n\n  async clearCache(organization: string, project: string): Promise<void> {\n    // Clear data for specific org/project\n    for (const [key, repo] of this.repositories) {\n      if (repo.organization === organization && repo.projectName === project) {\n        this.repositories.delete(key);\n      }\n    }\n    \n    for (const [key, wi] of this.workItems) {\n      if (wi.projectName === project) {\n        this.workItems.delete(key);\n      }\n    }\n    \n    for (const [key, tm] of this.teamMembers) {\n      if (tm.organization === organization && tm.projectName === project) {\n        this.teamMembers.delete(key);\n      }\n    }\n    \n    for (const [key, sprint] of this.sprints) {\n      if (sprint.organization === organization && sprint.projectName === project) {\n        this.sprints.delete(key);\n      }\n    }\n    \n    const cacheKey = `${organization}:${project}`;\n    this.cacheTimestamps.delete(cacheKey);\n  }\n\n  async getLastCacheUpdate(entity: string, organization: string, project: string): Promise<Date | undefined> {\n    const cacheKey = `${entity}:${organization}:${project}`;\n    return this.cacheTimestamps.get(cacheKey);\n  }\n\n  async updateCacheTimestamp(entity: string, organization: string, project: string): Promise<void> {\n    const cacheKey = `${entity}:${organization}:${project}`;\n    this.cacheTimestamps.set(cacheKey, new Date());\n  }\n}\n\n// Use database storage for permanent data\nexport const storage = new DbStorage();\n","size_bytes":29319},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Azure DevOps Tables\nexport const repositories = pgTable(\"repositories\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  projectId: varchar(\"project_id\").notNull(),\n  projectName: text(\"project_name\").notNull(),\n  organization: text(\"organization\").notNull(),\n  defaultBranch: text(\"default_branch\"),\n  size: integer(\"size\"),\n  url: text(\"url\"),\n  webUrl: text(\"web_url\"),\n  createdDate: timestamp(\"created_date\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const commits = pgTable(\"commits\", {\n  id: varchar(\"id\").primaryKey(),\n  commitId: varchar(\"commit_id\").notNull(),\n  repositoryId: varchar(\"repository_id\").notNull(),\n  authorName: text(\"author_name\").notNull(),\n  authorEmail: text(\"author_email\").notNull(),\n  authorDate: timestamp(\"author_date\").notNull(),\n  committerName: text(\"committer_name\").notNull(),\n  committerEmail: text(\"committer_email\").notNull(),\n  committerDate: timestamp(\"committer_date\").notNull(),\n  comment: text(\"comment\").notNull(),\n  commentTruncated: boolean(\"comment_truncated\").default(false),\n  changeCounts: jsonb(\"change_counts\").$type<{\n    Add: number;\n    Edit: number;\n    Delete: number;\n  }>(),\n  url: text(\"url\"),\n  remoteUrl: text(\"remote_url\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const workItems = pgTable(\"work_items\", {\n  id: integer(\"id\").primaryKey(),\n  rev: integer(\"rev\"),\n  projectName: text(\"project_name\").notNull(),\n  areaPath: text(\"area_path\"),\n  iterationPath: text(\"iteration_path\"),\n  workItemType: text(\"work_item_type\").notNull(),\n  state: text(\"state\").notNull(),\n  reason: text(\"reason\"),\n  title: text(\"title\").notNull(),\n  assignedToName: text(\"assigned_to_name\"),\n  assignedToEmail: text(\"assigned_to_email\"),\n  assignedToImageUrl: text(\"assigned_to_image_url\"),\n  createdDate: timestamp(\"created_date\").notNull(),\n  createdByName: text(\"created_by_name\"),\n  createdByEmail: text(\"created_by_email\"),\n  changedDate: timestamp(\"changed_date\"),\n  description: text(\"description\"),\n  acceptanceCriteria: text(\"acceptance_criteria\"),\n  storyPoints: integer(\"story_points\"),\n  priority: integer(\"priority\"),\n  severity: text(\"severity\"),\n  tags: text(\"tags\").array(),\n  url: text(\"url\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const pullRequests = pgTable(\"pull_requests\", {\n  id: integer(\"id\").primaryKey(),\n  repositoryId: varchar(\"repository_id\").notNull(),\n  pullRequestId: integer(\"pull_request_id\").notNull(),\n  codeReviewId: integer(\"code_review_id\"),\n  status: text(\"status\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  sourceRefName: text(\"source_ref_name\").notNull(),\n  targetRefName: text(\"target_ref_name\").notNull(),\n  mergeStatus: text(\"merge_status\"),\n  isDraft: boolean(\"is_draft\").default(false),\n  createdByName: text(\"created_by_name\").notNull(),\n  createdByEmail: text(\"created_by_email\"),\n  createdByImageUrl: text(\"created_by_image_url\"),\n  creationDate: timestamp(\"creation_date\").notNull(),\n  reviewers: jsonb(\"reviewers\").$type<Array<{\n    displayName: string;\n    email?: string;\n    imageUrl?: string;\n    vote: 'approved' | 'approved_with_suggestions' | 'no_vote' | 'waiting' | 'rejected';\n    isRequired?: boolean;\n  }>>(),\n  workItemIds: integer(\"work_item_ids\").array(),\n  url: text(\"url\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey(),\n  displayName: text(\"display_name\").notNull(),\n  email: text(\"email\"),\n  uniqueName: text(\"unique_name\"),\n  imageUrl: text(\"image_url\"),\n  projectName: text(\"project_name\").notNull(),\n  organization: text(\"organization\").notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const sprints = pgTable(\"sprints\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  path: text(\"path\").notNull(),\n  projectName: text(\"project_name\").notNull(),\n  organization: text(\"organization\").notNull(),\n  startDate: timestamp(\"start_date\"),\n  finishDate: timestamp(\"finish_date\"),\n  state: text(\"state\"), // future, current, past\n  attributes: jsonb(\"attributes\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertRepositorySchema = createInsertSchema(repositories);\nexport const insertCommitSchema = createInsertSchema(commits);\nexport const insertWorkItemSchema = createInsertSchema(workItems);\nexport const insertPullRequestSchema = createInsertSchema(pullRequests);\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers);\nexport const insertSprintSchema = createInsertSchema(sprints);\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertRepository = z.infer<typeof insertRepositorySchema>;\nexport type Repository = typeof repositories.$inferSelect;\n\nexport type InsertCommit = z.infer<typeof insertCommitSchema>;\nexport type Commit = typeof commits.$inferSelect;\n\nexport type InsertWorkItem = z.infer<typeof insertWorkItemSchema>;\nexport type WorkItem = typeof workItems.$inferSelect;\n\nexport type InsertPullRequest = z.infer<typeof insertPullRequestSchema>;\nexport type PullRequest = typeof pullRequests.$inferSelect;\n\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\n\nexport type InsertSprint = z.infer<typeof insertSprintSchema>;\nexport type Sprint = typeof sprints.$inferSelect;\n","size_bytes":6034},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":749},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 218 24% 15%;\n\n  --border: 218 15% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 218 24% 15%;\n\n  --card-border: 218 15% 85%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 218 24% 15%;\n\n  --sidebar-border: 218 15% 82%;\n\n  --sidebar-primary: 213 94% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 90%;\n\n  --sidebar-accent-foreground: 218 24% 15%;\n\n  --sidebar-ring: 213 94% 50%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 218 24% 15%;\n\n  --popover-border: 218 15% 80%;\n\n  --primary: 213 94% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 218 24% 15%;\n\n  --muted: 218 10% 90%;\n\n  --muted-foreground: 218 15% 45%;\n\n  --accent: 218 15% 85%;\n\n  --accent-foreground: 218 24% 20%;\n\n  --destructive: 0 84% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 218 15% 75%;\n  --ring: 213 94% 50%;\n  --chart-1: 213 94% 45%;\n  --chart-2: 142 69% 45%;\n  --chart-3: 38 92% 40%;\n  --chart-4: 0 84% 50%;\n  --chart-5: 271 91% 55%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(218 24% 15% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(218 24% 15% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(218 24% 15% / 0.05), 0px 1px 2px -1px hsl(218 24% 15% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(218 24% 15% / 0.05), 0px 1px 2px -1px hsl(218 24% 15% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(218 24% 15% / 0.05), 0px 2px 4px -1px hsl(218 24% 15% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(218 24% 15% / 0.05), 0px 4px 6px -1px hsl(218 24% 15% / 0.15);\n  --shadow-xl: 0px 2px 0px 0px hsl(218 24% 15% / 0.05), 0px 8px 10px -1px hsl(218 24% 15% / 0.20);\n  --shadow-2xl: 0px 2px 0px 0px hsl(218 24% 15% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 218 24% 12%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 218 20% 25%;\n\n  --card: 218 20% 18%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 218 20% 28%;\n\n  --sidebar: 218 24% 15%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 218 20% 30%;\n\n  --sidebar-primary: 213 94% 68%;\n\n  --sidebar-primary-foreground: 218 24% 15%;\n\n  --sidebar-accent: 218 20% 22%;\n\n  --sidebar-accent-foreground: 218 15% 80%;\n\n  --sidebar-ring: 213 94% 68%;\n\n  --popover: 218 20% 20%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 218 20% 32%;\n\n  --primary: 213 94% 68%;\n\n  --primary-foreground: 218 24% 15%;\n\n  --secondary: 218 20% 25%;\n\n  --secondary-foreground: 218 15% 85%;\n\n  --muted: 218 15% 16%;\n\n  --muted-foreground: 218 15% 70%;\n\n  --accent: 218 20% 22%;\n\n  --accent-foreground: 218 15% 85%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 95%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 218 20% 35%;\n  --ring: 213 94% 68%;\n  --chart-1: 213 94% 75%;\n  --chart-2: 142 69% 65%;\n  --chart-3: 38 92% 60%;\n  --chart-4: 0 84% 70%;\n  --chart-5: 271 91% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 4px 6px -1px hsl(0 0% 0% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 8px 10px -1px hsl(0 0% 0% / 0.50);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.60);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9969},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport DashboardHeader from \"./DashboardHeader\";\nimport MetricsOverview from \"./MetricsOverview\";\nimport WorkItemsTable from \"./WorkItemsTable\";\nimport SprintChart from \"./SprintChart\";\nimport PullRequestsSection from \"./PullRequestsSection\";\nimport TeamPerformance from \"./TeamPerformance\";\nimport DependencyView from \"./DependencyView\";\n\nexport default function Dashboard() {\n  // Load selected sprint from localStorage or use empty string as default\n  const [selectedSprint, setSelectedSprint] = useState<string>(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('selectedSprint') || '';\n    }\n    return '';\n  });\n\n  // Fetch real data from Azure DevOps APIs\n  const { data: dashboardData, isLoading: isDashboardLoading, refetch: refetchDashboard } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n    enabled: true\n  });\n\n  const { data: sprints, isLoading: isSprintsLoading } = useQuery({\n    queryKey: [\"/api/sprints\"],\n    enabled: true\n  });\n\n  const { data: repositories, isLoading: isRepositoriesLoading } = useQuery({\n    queryKey: [\"/api/repositories\"],\n    enabled: true\n  });\n\n  // Transform sprints data from Azure DevOps API first\n  const transformedSprints = sprints?.map((sprint: any) => ({\n    id: sprint.id || sprint.identifier,\n    name: sprint.name,\n    path: sprint.path,\n    startDate: sprint.startDate || new Date().toISOString(),\n    finishDate: sprint.finishDate || new Date().toISOString(),\n    timeFrame: sprint.state || \"unknown\" as const\n  })) || [];\n\n  // Get the selected sprint's iteration path\n  const selectedSprintPath = transformedSprints.find(s => s.id === selectedSprint)?.path;\n  \n  const { data: workItems, isLoading: isWorkItemsLoading, refetch: refetchWorkItems } = useQuery({\n    queryKey: [\"/api/work-items\", { iterationPath: selectedSprintPath }],\n    enabled: !!selectedSprintPath,\n    queryFn: async ({ queryKey }) => {\n      const [_, params] = queryKey as [string, { iterationPath?: string }];\n      const searchParams = new URLSearchParams();\n      if (params.iterationPath) {\n        searchParams.set('iterationPath', params.iterationPath);\n      }\n      const response = await fetch(`/api/work-items?${searchParams.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch work items');\n      return response.json();\n    }\n  });\n\n  // Check loading states\n  const isLoading = isDashboardLoading || isSprintsLoading || isWorkItemsLoading || isRepositoriesLoading;\n\n  // Auto-select first sprint if none selected and sprints are available\n  useEffect(() => {\n    if (transformedSprints.length > 0 && !selectedSprint) {\n      const firstSprintId = transformedSprints[0].id;\n      setSelectedSprint(firstSprintId);\n      localStorage.setItem('selectedSprint', firstSprintId);\n      // Refetch work items for the newly selected sprint\n      setTimeout(() => refetchWorkItems(), 100);\n    }\n  }, [transformedSprints, selectedSprint, refetchWorkItems]);\n\n  // Save selected sprint to localStorage when it changes\n  useEffect(() => {\n    if (selectedSprint) {\n      localStorage.setItem('selectedSprint', selectedSprint);\n    }\n  }, [selectedSprint]);\n\n  // Transform work items data\n  const transformedWorkItems = workItems?.slice(0, 5).map((item: any) => ({\n    id: item.id,\n    title: item.title,\n    type: item.workItemType as \"User Story\" | \"Task\" | \"Bug\",\n    state: item.state as \"Active\" | \"New\" | \"Resolved\" | \"Closed\",\n    assignedTo: {\n      displayName: item.assignedToName || \"Unassigned\",\n      imageUrl: item.assignedToImageUrl\n    },\n    hoursAllocated: Math.floor(Math.random() * 20) + 4, // Placeholder since not in Azure DevOps API\n    hoursBurned: Math.floor(Math.random() * 15) + 1,\n    priority: ([\"High\", \"Medium\", \"Low\", \"Critical\"][Math.floor(Math.random() * 4)]) as \"High\" | \"Medium\" | \"Low\" | \"Critical\",\n    tags: item.tags || []\n  })) || [];\n\n  // Build dashboard data from API responses\n  const transformedData = {\n    sprints: transformedSprints,\n    metrics: {\n      totalWorkItems: dashboardData?.metrics?.totalWorkItems || 0,\n      completedWorkItems: dashboardData?.metrics?.completedWorkItems || 0,\n      inProgressWorkItems: dashboardData?.metrics?.inProgressWorkItems || 0,\n      blockedWorkItems: dashboardData?.metrics?.blockedWorkItems || 0,\n      totalHoursAllocated: 480, // Placeholder - not available from Azure DevOps directly\n      totalHoursBurned: 392,\n      activeTeamMembers: dashboardData?.metrics?.totalRepositories || 12,\n      openPullRequests: 14, // Placeholder\n      pendingReviews: 7\n    },\n    workItems: transformedWorkItems,\n    burndownData: [\n      { day: \"1\", ideal: 50, actual: 50, date: \"2025-09-30\" },\n      { day: \"2\", ideal: 45, actual: 48, date: \"2025-10-01\" },\n      { day: \"3\", ideal: 40, actual: 44, date: \"2025-10-02\" },\n      { day: \"4\", ideal: 35, actual: 40, date: \"2025-10-03\" },\n      { day: \"5\", ideal: 30, actual: 35, date: \"2025-10-04\" },\n      { day: \"6\", ideal: 25, actual: 32, date: \"2025-10-07\" },\n      { day: \"7\", ideal: 20, actual: 28, date: \"2025-10-08\" },\n      { day: \"8\", ideal: 15, actual: 22, date: \"2025-10-09\" },\n      { day: \"9\", ideal: 10, actual: 18, date: \"2025-10-10\" },\n      { day: \"10\", ideal: 5, actual: 12, date: \"2025-10-11\" },\n      { day: \"11\", ideal: 0, actual: 8, date: \"2025-10-12\" }\n    ],\n    completionData: dashboardData?.workItemsByType?.map((item: any) => ({\n      name: item.type,\n      completed: Math.floor(item.count * 0.7),\n      total: item.count,\n      percentage: Math.floor(item.count * 0.7 / item.count * 100)\n    })) || [\n      { name: \"User Stories\", completed: 8, total: 12, percentage: 67 },\n      { name: \"Tasks\", completed: 24, total: 28, percentage: 86 },\n      { name: \"Bugs\", completed: 4, total: 5, percentage: 80 }\n    ],\n    pullRequests: [\n      {\n        id: 1234,\n        title: \"Feature: Add authentication middleware\",\n        description: \"Implements JWT-based authentication middleware with role-based access control for API endpoints.\",\n        repository: \"lifesafety-backend\",\n        sourceBranch: \"feature/auth-middleware\",\n        targetBranch: \"main\",\n        author: {\n          displayName: \"Sarah Johnson\",\n          imageUrl: undefined\n        },\n        reviewers: [\n          {\n            displayName: \"Dev Sharma\",\n            imageUrl: undefined,\n            vote: \"approved\" as const\n          },\n          {\n            displayName: \"Alex Rodriguez\", \n            imageUrl: undefined,\n            vote: \"waiting\" as const\n          }\n        ],\n        status: \"active\" as const,\n        isDraft: false,\n        createdDate: \"2025-10-10T09:30:00Z\",\n        workItems: [33990, 33921]\n      }\n    ],\n    teamMembers: [\n      {\n        displayName: \"Sarah Johnson\",\n        imageUrl: undefined,\n        email: \"sarah.johnson@podtech.io\",\n        workItems: {\n          total: 8,\n          completed: 6,\n          inProgress: 2,\n          blocked: 0\n        },\n        hours: {\n          allocated: 40,\n          burned: 35\n        },\n        pullRequests: {\n          active: 2,\n          reviewsPending: 1,\n          approved: 4\n        },\n        velocity: {\n          current: 12,\n          previous: 10,\n          trend: \"up\" as const\n        }\n      },\n      {\n        displayName: \"Christopher Lee\",\n        imageUrl: undefined,\n        email: \"christopher.lee@podtech.io\",\n        workItems: {\n          total: 6,\n          completed: 5,\n          inProgress: 1,\n          blocked: 0\n        },\n        hours: {\n          allocated: 40,\n          burned: 38\n        },\n        pullRequests: {\n          active: 1,\n          reviewsPending: 0,\n          approved: 3\n        },\n        velocity: {\n          current: 8,\n          previous: 8,\n          trend: \"stable\" as const\n        }\n      }\n    ],\n    dependencies: [\n      {\n        id: \"dep-1\",\n        type: \"pr_review\" as const,\n        title: \"Waiting for security review on authentication PR\",\n        description: \"Pull request #1234 implementing JWT authentication requires security team approval before merging to main branch.\",\n        blockedItem: {\n          id: 1234,\n          title: \"Feature: Add authentication middleware\", \n          type: \"pull_request\" as const,\n          assignee: {\n            displayName: \"Sarah Johnson\",\n            imageUrl: undefined\n          }\n        },\n        blockingEntity: {\n          name: \"Dev Sharma\",\n          type: \"person\" as const,\n          imageUrl: undefined\n        },\n        severity: \"high\" as const,\n        daysSinceCreated: 5,\n        url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/repos/pullrequest/1234\"\n      }\n    ]\n  };\n\n  const handleSprintChange = async (sprintId: string) => {\n    setSelectedSprint(sprintId);\n    localStorage.setItem('selectedSprint', sprintId);\n    console.log('Selected sprint changed to:', sprintId);\n    \n    // Refetch work items for the selected sprint\n    await refetchWorkItems();\n  };\n\n  const handleRefresh = async () => {\n    console.log('Refreshing dashboard data...');\n    try {\n      await Promise.all([\n        refetchDashboard(),\n        // Add other refetch calls as needed\n      ]);\n      console.log('Dashboard data refreshed successfully');\n    } catch (error) {\n      console.error('Failed to refresh dashboard data:', error);\n    }\n  };\n\n  // Show loading state while fetching data\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Loading Azure DevOps data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader\n        project=\"WLS\"\n        organization=\"podtech-io\"\n        sprints={transformedData.sprints}\n        selectedSprint={selectedSprint}\n        onSprintChange={handleSprintChange}\n        onRefresh={handleRefresh}\n      />\n      \n      <main className=\"container mx-auto p-6 space-y-6\">\n        <MetricsOverview metrics={transformedData.metrics} />\n        \n        <SprintChart \n          burndownData={transformedData.burndownData}\n          completionData={transformedData.completionData}\n          sprintDuration={14}\n          currentDay={8}\n        />\n        \n        <div className=\"grid gap-6 lg:grid-cols-2\">\n          <WorkItemsTable \n            workItems={transformedData.workItems}\n            organization=\"podtech-io\"\n            project=\"WLS\"\n          />\n          \n          <PullRequestsSection \n            pullRequests={transformedData.pullRequests}\n            organization=\"podtech-io\"\n            project=\"WLS\"\n          />\n        </div>\n        \n        <TeamPerformance teamMembers={transformedData.teamMembers} />\n        \n        <DependencyView \n          dependencies={transformedData.dependencies}\n          organization=\"podtech-io\"\n          project=\"WLS\"\n        />\n      </main>\n    </div>\n  );\n}","size_bytes":11121},"client/src/components/DashboardHeader.tsx":{"content":"import { useState } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, RefreshCcw, Settings, ExternalLink } from \"lucide-react\";\nimport SettingsDialog from \"./SettingsDialog\";\n\ninterface Sprint {\n  id: string;\n  name: string;\n  path: string;\n  startDate: string;\n  finishDate: string;\n  timeFrame: \"past\" | \"current\" | \"future\";\n}\n\ninterface DashboardHeaderProps {\n  project: string;\n  organization: string;\n  sprints: Sprint[];\n  selectedSprint?: string;\n  onSprintChange: (sprintId: string) => void;\n  onRefresh: () => void;\n}\n\nexport default function DashboardHeader({\n  project,\n  organization,\n  sprints,\n  selectedSprint,\n  onSprintChange,\n  onRefresh\n}: DashboardHeaderProps) {\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await onRefresh();\n    setIsRefreshing(false);\n  };\n\n  const currentSprint = sprints.find(s => s.id === selectedSprint);\n  const azureDevOpsUrl = `https://dev.azure.com/${organization}/${project}`;\n\n  return (\n    <div className=\"border-b bg-card\">\n      <div className=\"flex flex-col gap-4 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">Azure DevOps Analytics</h1>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <span>{organization}</span>\n                <span>/</span>\n                <span className=\"font-medium\">{project}</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-5 w-5 p-0\"\n                  onClick={() => window.open(azureDevOpsUrl, '_blank')}\n                  data-testid=\"link-azure-devops\"\n                >\n                  <ExternalLink className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              data-testid=\"button-refresh\"\n              className=\"border-blue-500 bg-blue-600 hover:bg-blue-700 text-white font-medium\"\n            >\n              <RefreshCcw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => setSettingsOpen(true)}\n              data-testid=\"button-settings\"\n              className=\"border-slate-500 bg-slate-700 hover:bg-slate-600 text-white\"\n            >\n              <Settings className=\"h-4 w-4\" />\n            </Button>\n            <SettingsDialog open={settingsOpen} onOpenChange={setSettingsOpen} />\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4 text-white\" />\n            <span className=\"text-sm font-medium text-white\">Sprint:</span>\n          </div>\n          \n          <Select value={selectedSprint} onValueChange={onSprintChange}>\n            <SelectTrigger className=\"w-[300px] border-2 border-blue-400 bg-slate-600 text-white hover:bg-slate-500 font-medium shadow-lg\" data-testid=\"select-sprint\">\n              <SelectValue placeholder=\"Select a sprint...\" />\n            </SelectTrigger>\n            <SelectContent>\n              {sprints.map((sprint) => (\n                <SelectItem key={sprint.id} value={sprint.id}>\n                  <div className=\"flex items-center gap-2\">\n                    <span>{sprint.name}</span>\n                    <Badge \n                      variant={sprint.timeFrame === 'current' ? 'default' : 'secondary'}\n                      className=\"text-xs\"\n                    >\n                      {sprint.timeFrame}\n                    </Badge>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          {currentSprint && (\n            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n              <span>\n                {new Date(currentSprint.startDate).toLocaleDateString()} - {new Date(currentSprint.finishDate).toLocaleDateString()}\n              </span>\n              <Badge variant={currentSprint.timeFrame === 'current' ? 'default' : 'secondary'}>\n                {currentSprint.timeFrame}\n              </Badge>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4909},"client/src/components/DependencyView.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  AlertTriangle, \n  Clock, \n  GitPullRequest, \n  User, \n  ExternalLink,\n  ArrowRight,\n  Link as LinkIcon\n} from \"lucide-react\";\n\ninterface Dependency {\n  id: string;\n  type: \"pr_review\" | \"work_item_blocked\" | \"external_dependency\";\n  title: string;\n  description: string;\n  blockedItem: {\n    id: number;\n    title: string;\n    type: \"work_item\" | \"pull_request\";\n    assignee?: {\n      displayName: string;\n      imageUrl?: string;\n    };\n  };\n  blockingEntity: {\n    name: string;\n    type: \"person\" | \"external_system\" | \"work_item\";\n    imageUrl?: string;\n  };\n  severity: \"high\" | \"medium\" | \"low\";\n  daysSinceCreated: number;\n  url?: string;\n}\n\ninterface DependencyViewProps {\n  dependencies: Dependency[];\n  organization: string;\n  project: string;\n}\n\nexport default function DependencyView({ \n  dependencies, \n  organization, \n  project \n}: DependencyViewProps) {\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"high\": return \"destructive\";\n      case \"medium\": return \"default\";\n      case \"low\": return \"secondary\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"pr_review\": return <GitPullRequest className=\"h-4 w-4\" />;\n      case \"work_item_blocked\": return <AlertTriangle className=\"h-4 w-4\" />;\n      case \"external_dependency\": return <LinkIcon className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"pr_review\": return \"PR Review\";\n      case \"work_item_blocked\": return \"Work Item Blocked\";\n      case \"external_dependency\": return \"External Dependency\";\n      default: return \"Unknown\";\n    }\n  };\n\n  const openInAzureDevOps = (dependency: Dependency) => {\n    if (dependency.url) {\n      window.open(dependency.url, '_blank');\n    } else if (dependency.blockedItem.type === \"work_item\") {\n      const url = `https://dev.azure.com/${organization}/${project}/_workitems/edit/${dependency.blockedItem.id}`;\n      window.open(url, '_blank');\n    } else if (dependency.blockedItem.type === \"pull_request\") {\n      const url = `https://dev.azure.com/${organization}/${project}/_git/repos/pullrequest/${dependency.blockedItem.id}`;\n      window.open(url, '_blank');\n    }\n  };\n\n  const getDaysOverdueClass = (days: number) => {\n    if (days > 7) return \"text-red-500\";\n    if (days > 3) return \"text-yellow-500\";\n    return \"text-muted-foreground\";\n  };\n\n  const highPriorityDeps = dependencies.filter(d => d.severity === \"high\").length;\n  const totalBlockedItems = dependencies.length;\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            Dependencies & Blockers\n            <Badge variant=\"secondary\">{totalBlockedItems}</Badge>\n          </CardTitle>\n          \n          {highPriorityDeps > 0 && (\n            <Badge variant=\"destructive\" className=\"animate-pulse\">\n              {highPriorityDeps} High Priority\n            </Badge>\n          )}\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {dependencies.map((dependency) => (\n            <div\n              key={dependency.id}\n              className=\"border rounded-lg p-4 hover-elevate\"\n              data-testid={`dependency-${dependency.id}`}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-start gap-3 flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    {getTypeIcon(dependency.type)}\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {getTypeLabel(dependency.type)}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-sm mb-1\">{dependency.title}</h4>\n                    <p className=\"text-xs text-muted-foreground mb-2\">\n                      {dependency.description}\n                    </p>\n                    \n                    <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                      <Badge variant={getSeverityColor(dependency.severity) as any} className=\"text-xs\">\n                        {dependency.severity} priority\n                      </Badge>\n                      <span className={getDaysOverdueClass(dependency.daysSinceCreated)}>\n                        {dependency.daysSinceCreated} days ago\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={getSeverityColor(dependency.severity) as any}>\n                    {dependency.severity}\n                  </Badge>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => openInAzureDevOps(dependency)}\n                    data-testid={`link-dependency-${dependency.id}`}\n                  >\n                    <ExternalLink className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs text-muted-foreground\">Blocked:</span>\n                    <div className=\"flex items-center gap-1\">\n                      <span className=\"font-mono text-xs\">#{dependency.blockedItem.id}</span>\n                      <span className=\"text-xs\">{dependency.blockedItem.title}</span>\n                    </div>\n                    {dependency.blockedItem.assignee && (\n                      <div className=\"flex items-center gap-1\">\n                        <Avatar className=\"h-4 w-4\">\n                          <AvatarImage src={dependency.blockedItem.assignee.imageUrl} />\n                          <AvatarFallback className=\"text-xs\">\n                            {dependency.blockedItem.assignee.displayName.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"text-xs\">{dependency.blockedItem.assignee.displayName}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs text-muted-foreground\">Waiting on:</span>\n                    {dependency.blockingEntity.type === \"person\" && (\n                      <div className=\"flex items-center gap-1\">\n                        <Avatar className=\"h-4 w-4\">\n                          <AvatarImage src={dependency.blockingEntity.imageUrl} />\n                          <AvatarFallback className=\"text-xs\">\n                            {dependency.blockingEntity.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"text-xs font-medium\">{dependency.blockingEntity.name}</span>\n                      </div>\n                    )}\n                    {dependency.blockingEntity.type === \"external_system\" && (\n                      <div className=\"flex items-center gap-1\">\n                        <LinkIcon className=\"h-3 w-3\" />\n                        <span className=\"text-xs font-medium\">{dependency.blockingEntity.name}</span>\n                      </div>\n                    )}\n                    {dependency.blockingEntity.type === \"work_item\" && (\n                      <div className=\"flex items-center gap-1\">\n                        <AlertTriangle className=\"h-3 w-3\" />\n                        <span className=\"text-xs font-medium\">{dependency.blockingEntity.name}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n          \n          {dependencies.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <AlertTriangle className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p>No dependencies or blockers found.</p>\n              <p className=\"text-xs mt-1\">Great! All work items are unblocked.</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9080},"client/src/components/MetricsOverview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  CheckCircle, \n  Clock, \n  AlertTriangle, \n  Users, \n  GitPullRequest, \n  Timer,\n  TrendingUp,\n  TrendingDown,\n  Minus\n} from \"lucide-react\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  icon: React.ComponentType<{ className?: string }>;\n  trend?: \"up\" | \"down\" | \"neutral\";\n  trendValue?: string;\n  progress?: number;\n  variant?: \"default\" | \"success\" | \"warning\" | \"destructive\";\n}\n\nfunction MetricCard({ \n  title, \n  value, \n  subtitle, \n  icon: Icon, \n  trend, \n  trendValue, \n  progress,\n  variant = \"default\" \n}: MetricCardProps) {\n  const getTrendIcon = () => {\n    switch (trend) {\n      case \"up\": return <TrendingUp className=\"h-3 w-3 text-green-500\" />;\n      case \"down\": return <TrendingDown className=\"h-3 w-3 text-red-500\" />;\n      case \"neutral\": return <Minus className=\"h-3 w-3 text-muted-foreground\" />;\n      default: return null;\n    }\n  };\n\n  const getValueColor = () => {\n    switch (variant) {\n      case \"success\": return \"text-green-600 dark:text-green-400\";\n      case \"warning\": return \"text-yellow-600 dark:text-yellow-400\";\n      case \"destructive\": return \"text-red-600 dark:text-red-400\";\n      default: return \"text-foreground\";\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n          {title}\n        </CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-baseline gap-2\">\n          <div className={`text-2xl font-bold ${getValueColor()}`}>\n            {value}\n          </div>\n          {trend && trendValue && (\n            <div className=\"flex items-center gap-1 text-xs\">\n              {getTrendIcon()}\n              <span className=\"text-muted-foreground\">{trendValue}</span>\n            </div>\n          )}\n        </div>\n        {subtitle && (\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {subtitle}\n          </p>\n        )}\n        {progress !== undefined && (\n          <Progress value={progress} className=\"mt-3 h-2\" />\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface MetricsOverviewProps {\n  metrics: {\n    totalWorkItems: number;\n    completedWorkItems: number;\n    inProgressWorkItems: number;\n    blockedWorkItems: number;\n    totalHoursAllocated: number;\n    totalHoursBurned: number;\n    activeTeamMembers: number;\n    openPullRequests: number;\n    pendingReviews: number;\n  };\n}\n\nexport default function MetricsOverview({ metrics }: MetricsOverviewProps) {\n  const completionRate = Math.round((metrics.completedWorkItems / metrics.totalWorkItems) * 100);\n  const burnRate = Math.round((metrics.totalHoursBurned / metrics.totalHoursAllocated) * 100);\n  \n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <MetricCard\n        title=\"Work Items Completed\"\n        value={`${metrics.completedWorkItems}/${metrics.totalWorkItems}`}\n        subtitle={`${completionRate}% complete`}\n        icon={CheckCircle}\n        progress={completionRate}\n        variant=\"success\"\n        trend=\"up\"\n        trendValue=\"+12% from last sprint\"\n      />\n      \n      <MetricCard\n        title=\"Hours Burned\"\n        value={`${metrics.totalHoursBurned}h`}\n        subtitle={`${metrics.totalHoursAllocated}h allocated`}\n        icon={Timer}\n        progress={burnRate}\n        variant={burnRate > 90 ? \"warning\" : \"default\"}\n        trend=\"neutral\"\n        trendValue={`${burnRate}% of allocation`}\n      />\n      \n      <MetricCard\n        title=\"Active Pull Requests\"\n        value={metrics.openPullRequests}\n        subtitle={`${metrics.pendingReviews} pending reviews`}\n        icon={GitPullRequest}\n        variant={metrics.pendingReviews > 5 ? \"warning\" : \"default\"}\n        trend=\"down\"\n        trendValue=\"-3 from yesterday\"\n      />\n      \n      <MetricCard\n        title=\"Blocked Items\"\n        value={metrics.blockedWorkItems}\n        subtitle={`${metrics.inProgressWorkItems} in progress`}\n        icon={AlertTriangle}\n        variant={metrics.blockedWorkItems > 0 ? \"destructive\" : \"success\"}\n        trend={metrics.blockedWorkItems > 0 ? \"up\" : \"neutral\"}\n        trendValue={metrics.blockedWorkItems > 0 ? \"+2 new blocks\" : \"No blocks\"}\n      />\n    </div>\n  );\n}","size_bytes":4590},"client/src/components/PullRequestsSection.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  GitPullRequest, \n  GitMerge, \n  GitBranch, \n  Clock, \n  CheckCircle, \n  XCircle, \n  AlertCircle,\n  ExternalLink,\n  Users\n} from \"lucide-react\";\n\ninterface PullRequest {\n  id: number;\n  title: string;\n  description: string;\n  repository: string;\n  sourceBranch: string;\n  targetBranch: string;\n  author: {\n    displayName: string;\n    imageUrl?: string;\n  };\n  reviewers: Array<{\n    displayName: string;\n    imageUrl?: string;\n    vote: \"approved\" | \"waiting\" | \"rejected\" | \"not_reviewed\";\n  }>;\n  status: \"active\" | \"completed\" | \"abandoned\";\n  isDraft: boolean;\n  createdDate: string;\n  workItems: number[];\n}\n\ninterface PullRequestsSectionProps {\n  pullRequests: PullRequest[];\n  organization: string;\n  project: string;\n}\n\nexport default function PullRequestsSection({ \n  pullRequests, \n  organization, \n  project \n}: PullRequestsSectionProps) {\n  const [filter, setFilter] = useState<\"all\" | \"active\" | \"completed\" | \"abandoned\">(\"all\");\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"active\": return <GitPullRequest className=\"h-4 w-4 text-blue-500\" />;\n      case \"completed\": return <GitMerge className=\"h-4 w-4 text-green-500\" />;\n      case \"abandoned\": return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default: return <GitBranch className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"default\";\n      case \"completed\": return \"outline\";\n      case \"abandoned\": return \"destructive\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getReviewIcon = (vote: string) => {\n    switch (vote) {\n      case \"approved\": return <CheckCircle className=\"h-3 w-3 text-green-500\" />;\n      case \"rejected\": return <XCircle className=\"h-3 w-3 text-red-500\" />;\n      case \"waiting\": return <Clock className=\"h-3 w-3 text-yellow-500\" />;\n      default: return <AlertCircle className=\"h-3 w-3 text-muted-foreground\" />;\n    }\n  };\n\n  const filteredPRs = pullRequests.filter(pr => \n    filter === \"all\" || pr.status === filter\n  );\n\n  const openInAzureDevOps = (prId: number, repository: string) => {\n    const url = `https://dev.azure.com/${organization}/${project}/_git/${repository}/pullrequest/${prId}`;\n    window.open(url, '_blank');\n  };\n\n  const activePRs = pullRequests.filter(pr => pr.status === \"active\").length;\n  const pendingReviews = pullRequests\n    .filter(pr => pr.status === \"active\")\n    .reduce((count, pr) => count + pr.reviewers.filter(r => r.vote === \"waiting\").length, 0);\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <GitPullRequest className=\"h-5 w-5\" />\n              Pull Requests\n            </CardTitle>\n            <Badge variant=\"secondary\">{filteredPRs.length}</Badge>\n          </div>\n          \n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <GitPullRequest className=\"h-4 w-4\" />\n              <span>{activePRs} active</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Users className=\"h-4 w-4\" />\n              <span>{pendingReviews} pending reviews</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          {([\"all\", \"active\", \"completed\", \"abandoned\"] as const).map((status) => (\n            <Button\n              key={status}\n              variant={filter === status ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilter(status)}\n              data-testid={`filter-${status}`}\n            >\n              {status.charAt(0).toUpperCase() + status.slice(1)}\n            </Button>\n          ))}\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {filteredPRs.map((pr) => (\n            <div\n              key={pr.id}\n              className=\"border rounded-lg p-4 hover-elevate\"\n              data-testid={`pr-${pr.id}`}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-start gap-3 flex-1\">\n                  {getStatusIcon(pr.status)}\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <h4 className=\"font-medium text-sm\">{pr.title}</h4>\n                      {pr.isDraft && (\n                        <Badge variant=\"outline\" className=\"text-xs\">Draft</Badge>\n                      )}\n                      <Badge variant={getStatusColor(pr.status) as any} className=\"text-xs\">\n                        {pr.status}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n                      {pr.description}\n                    </p>\n                    \n                    <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                      <span className=\"font-mono\">#{pr.id}</span>\n                      <span>{pr.repository}</span>\n                      <span>{pr.sourceBranch} → {pr.targetBranch}</span>\n                      <span>{new Date(pr.createdDate).toLocaleDateString()}</span>\n                      \n                      {pr.workItems.length > 0 && (\n                        <div className=\"flex items-center gap-1\">\n                          <span>Work items:</span>\n                          <div className=\"flex gap-1\">\n                            {pr.workItems.slice(0, 3).map((wi, idx) => (\n                              <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                                #{wi}\n                              </Badge>\n                            ))}\n                            {pr.workItems.length > 3 && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                +{pr.workItems.length - 3}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => openInAzureDevOps(pr.id, pr.repository)}\n                  data-testid={`link-pr-${pr.id}`}\n                >\n                  <ExternalLink className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Avatar className=\"h-6 w-6\">\n                    <AvatarImage src={pr.author.imageUrl} />\n                    <AvatarFallback className=\"text-xs\">\n                      {pr.author.displayName.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {pr.author.displayName}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-xs text-muted-foreground\">Reviewers:</span>\n                  <div className=\"flex items-center gap-1\">\n                    {pr.reviewers.map((reviewer, idx) => (\n                      <div key={idx} className=\"flex items-center gap-1\">\n                        <Avatar className=\"h-5 w-5\">\n                          <AvatarImage src={reviewer.imageUrl} />\n                          <AvatarFallback className=\"text-xs\">\n                            {reviewer.displayName.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        {getReviewIcon(reviewer.vote)}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n          \n          {filteredPRs.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <GitPullRequest className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p>No pull requests found for the selected filter.</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8908},"client/src/components/SprintChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell\n} from \"recharts\";\n\ninterface BurndownData {\n  day: string;\n  ideal: number;\n  actual: number;\n  date: string;\n}\n\ninterface CompletionData {\n  name: string;\n  completed: number;\n  total: number;\n  percentage: number;\n}\n\ninterface SprintChartProps {\n  burndownData: BurndownData[];\n  completionData: CompletionData[];\n  sprintDuration: number;\n  currentDay: number;\n}\n\nconst COLORS = {\n  primary: \"hsl(var(--chart-1))\",\n  secondary: \"hsl(var(--chart-2))\",\n  success: \"hsl(var(--chart-2))\",\n  warning: \"hsl(var(--chart-3))\",\n  danger: \"hsl(var(--chart-4))\"\n};\n\nexport default function SprintChart({ \n  burndownData, \n  completionData, \n  sprintDuration, \n  currentDay \n}: SprintChartProps) {\n  const totalStoryPoints = burndownData[0]?.actual || 0;\n  const remainingPoints = burndownData[burndownData.length - 1]?.actual || 0;\n  const completedPoints = totalStoryPoints - remainingPoints;\n  const progressPercentage = Math.round((completedPoints / totalStoryPoints) * 100);\n  \n  const isOnTrack = currentDay <= sprintDuration ? \n    remainingPoints <= (burndownData.find(d => d.day === currentDay.toString())?.ideal ?? 0) : \n    false;\n\n  const pieData = [\n    { name: \"Completed\", value: completedPoints, color: COLORS.success },\n    { name: \"Remaining\", value: remainingPoints, color: COLORS.secondary }\n  ];\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Sprint Burndown</CardTitle>\n            <Badge variant={isOnTrack ? \"default\" : \"destructive\"}>\n              {isOnTrack ? \"On Track\" : \"Behind Schedule\"}\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-4\">\n            <div className=\"flex items-center justify-between text-sm mb-2\">\n              <span>Sprint Progress</span>\n              <span>{progressPercentage}% Complete</span>\n            </div>\n            <Progress value={progressPercentage} className=\"h-2\" />\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground mt-1\">\n              <span>{completedPoints} completed</span>\n              <span>{remainingPoints} remaining</span>\n            </div>\n          </div>\n          \n          <div className=\"h-[250px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={burndownData}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                <XAxis \n                  dataKey=\"day\" \n                  tick={{ fontSize: 12 }}\n                  axisLine={false}\n                />\n                <YAxis \n                  tick={{ fontSize: 12 }}\n                  axisLine={false}\n                />\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: \"hsl(var(--popover))\",\n                    border: \"1px solid hsl(var(--border))\",\n                    borderRadius: \"6px\"\n                  }}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"ideal\" \n                  stroke={COLORS.secondary}\n                  strokeDasharray=\"5 5\"\n                  name=\"Ideal Burndown\"\n                  strokeWidth={2}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"actual\" \n                  stroke={COLORS.primary}\n                  name=\"Actual Progress\"\n                  strokeWidth={3}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Work Item Completion</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div className=\"h-[120px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={pieData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={30}\n                    outerRadius={50}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {pieData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            \n            <div className=\"space-y-2\">\n              {pieData.map((item, index) => (\n                <div key={index} className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-3 h-3 rounded-full\"\n                    style={{ backgroundColor: item.color }}\n                  />\n                  <span className=\"text-sm\">{item.name}</span>\n                  <span className=\"text-sm font-mono text-muted-foreground\">\n                    {item.value}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"h-[130px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={completionData}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                <XAxis \n                  dataKey=\"name\" \n                  tick={{ fontSize: 10 }}\n                  axisLine={false}\n                />\n                <YAxis \n                  tick={{ fontSize: 10 }}\n                  axisLine={false}\n                />\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: \"hsl(var(--popover))\",\n                    border: \"1px solid hsl(var(--border))\",\n                    borderRadius: \"6px\"\n                  }}\n                />\n                <Bar \n                  dataKey=\"completed\" \n                  fill={COLORS.success}\n                  name=\"Completed\"\n                  radius={[2, 2, 0, 0]}\n                />\n                <Bar \n                  dataKey=\"total\" \n                  fill={COLORS.secondary}\n                  name=\"Total\"\n                  radius={[2, 2, 0, 0]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6763},"client/src/components/TeamPerformance.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Clock, \n  CheckCircle, \n  AlertTriangle, \n  GitPullRequest,\n  User,\n  TrendingUp,\n  TrendingDown\n} from \"lucide-react\";\n\ninterface TeamMember {\n  displayName: string;\n  imageUrl?: string;\n  email: string;\n  workItems: {\n    total: number;\n    completed: number;\n    inProgress: number;\n    blocked: number;\n  };\n  hours: {\n    allocated: number;\n    burned: number;\n  };\n  pullRequests: {\n    active: number;\n    reviewsPending: number;\n    approved: number;\n  };\n  velocity: {\n    current: number;\n    previous: number;\n    trend: \"up\" | \"down\" | \"stable\";\n  };\n}\n\ninterface TeamPerformanceProps {\n  teamMembers: TeamMember[];\n}\n\nexport default function TeamPerformance({ teamMembers }: TeamPerformanceProps) {\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case \"up\": return <TrendingUp className=\"h-3 w-3 text-green-500\" />;\n      case \"down\": return <TrendingDown className=\"h-3 w-3 text-red-500\" />;\n      default: return null;\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <User className=\"h-5 w-5\" />\n          Team Performance\n          <Badge variant=\"secondary\">{teamMembers.length} members</Badge>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {teamMembers.map((member, index) => {\n            const completionRate = Math.round((member.workItems.completed / member.workItems.total) * 100);\n            const hourUtilization = Math.round((member.hours.burned / member.hours.allocated) * 100);\n            const velocityChange = member.velocity.current - member.velocity.previous;\n            \n            return (\n              <div\n                key={index}\n                className=\"border rounded-lg p-4 hover-elevate\"\n                data-testid={`team-member-${index}`}\n              >\n                <div className=\"flex items-start gap-4\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={member.imageUrl} />\n                    <AvatarFallback>\n                      {getInitials(member.displayName)}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div>\n                        <h4 className=\"font-medium text-sm\">{member.displayName}</h4>\n                        <p className=\"text-xs text-muted-foreground\">{member.email}</p>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        {getTrendIcon(member.velocity.trend)}\n                        <span className=\"text-xs text-muted-foreground\">\n                          Velocity: {member.velocity.current} \n                          {velocityChange !== 0 && (\n                            <span className={velocityChange > 0 ? \"text-green-500\" : \"text-red-500\"}>\n                              ({velocityChange > 0 ? '+' : ''}{velocityChange})\n                            </span>\n                          )}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {/* Work Items Progress */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <span className=\"text-muted-foreground\">Work Items</span>\n                          <span>{member.workItems.completed}/{member.workItems.total}</span>\n                        </div>\n                        <Progress value={completionRate} className=\"h-2\" />\n                        <div className=\"flex items-center gap-3 text-xs\">\n                          <div className=\"flex items-center gap-1\">\n                            <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                            <span>{member.workItems.completed}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3 text-blue-500\" />\n                            <span>{member.workItems.inProgress}</span>\n                          </div>\n                          {member.workItems.blocked > 0 && (\n                            <div className=\"flex items-center gap-1\">\n                              <AlertTriangle className=\"h-3 w-3 text-red-500\" />\n                              <span>{member.workItems.blocked}</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Hour Utilization */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <span className=\"text-muted-foreground\">Hours</span>\n                          <span>{member.hours.burned}h/{member.hours.allocated}h</span>\n                        </div>\n                        <Progress \n                          value={hourUtilization} \n                          className=\"h-2\"\n                        />\n                        <div className=\"text-xs text-muted-foreground\">\n                          {hourUtilization}% utilized\n                        </div>\n                      </div>\n                      \n                      {/* Pull Requests */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <span className=\"text-muted-foreground\">Pull Requests</span>\n                          <GitPullRequest className=\"h-3 w-3\" />\n                        </div>\n                        <div className=\"flex items-center gap-3 text-xs\">\n                          <div className=\"flex items-center gap-1\">\n                            <span className=\"text-blue-500\">Active:</span>\n                            <span>{member.pullRequests.active}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <span className=\"text-yellow-500\">Pending:</span>\n                            <span>{member.pullRequests.reviewsPending}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <span className=\"text-green-500\">Approved:</span>\n                            <span>{member.pullRequests.approved}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          \n          {teamMembers.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <User className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p>No team members found.</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7617},"client/src/components/WorkItemsTable.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Search, \n  ExternalLink, \n  Clock, \n  AlertTriangle,\n  CheckCircle,\n  Play,\n  Bug,\n  BookOpen,\n  CheckSquare\n} from \"lucide-react\";\n\ninterface WorkItem {\n  id: number;\n  title: string;\n  type: \"User Story\" | \"Task\" | \"Bug\";\n  state: \"New\" | \"Active\" | \"Resolved\" | \"Closed\" | \"Removed\";\n  assignedTo?: {\n    displayName: string;\n    imageUrl?: string;\n  };\n  hoursAllocated?: number;\n  hoursBurned?: number;\n  priority: \"Critical\" | \"High\" | \"Medium\" | \"Low\";\n  tags: string[];\n}\n\ninterface WorkItemsTableProps {\n  workItems: WorkItem[];\n  organization: string;\n  project: string;\n}\n\nexport default function WorkItemsTable({ workItems, organization, project }: WorkItemsTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [filterState, setFilterState] = useState<string>(\"all\");\n\n  const getWorkItemIcon = (type: string) => {\n    switch (type) {\n      case \"User Story\": return <BookOpen className=\"h-4 w-4\" />;\n      case \"Task\": return <CheckSquare className=\"h-4 w-4\" />;\n      case \"Bug\": return <Bug className=\"h-4 w-4\" />;\n      default: return <CheckSquare className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStateIcon = (state: string) => {\n    switch (state) {\n      case \"New\": return <Clock className=\"h-3 w-3\" />;\n      case \"Active\": return <Play className=\"h-3 w-3\" />;\n      case \"Resolved\": return <CheckCircle className=\"h-3 w-3\" />;\n      case \"Closed\": return <CheckCircle className=\"h-3 w-3\" />;\n      default: return <AlertTriangle className=\"h-3 w-3\" />;\n    }\n  };\n\n  const getStateColor = (state: string) => {\n    switch (state) {\n      case \"New\": return \"secondary\";\n      case \"Active\": return \"default\";\n      case \"Resolved\": return \"outline\";\n      case \"Closed\": return \"outline\";\n      default: return \"destructive\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"Critical\": return \"destructive\";\n      case \"High\": return \"destructive\";\n      case \"Medium\": return \"default\";\n      case \"Low\": return \"secondary\";\n      default: return \"secondary\";\n    }\n  };\n\n  const filteredWorkItems = workItems.filter(item => {\n    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.id.toString().includes(searchTerm);\n    const matchesType = filterType === \"all\" || item.type === filterType;\n    const matchesState = filterState === \"all\" || item.state === filterState;\n    \n    return matchesSearch && matchesType && matchesState;\n  });\n\n  const openInAzureDevOps = (workItemId: number) => {\n    const url = `https://dev.azure.com/${organization}/${project}/_workitems/edit/${workItemId}`;\n    window.open(url, '_blank');\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            Work Items\n            <Badge variant=\"secondary\">{filteredWorkItems.length}</Badge>\n          </CardTitle>\n          \n          <div className=\"flex items-center gap-2\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search work items...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-8 w-[250px]\"\n                data-testid=\"input-search-workitems\"\n              />\n            </div>\n            \n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-[120px]\" data-testid=\"select-type-filter\">\n                <SelectValue placeholder=\"Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"User Story\">User Story</SelectItem>\n                <SelectItem value=\"Task\">Task</SelectItem>\n                <SelectItem value=\"Bug\">Bug</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select value={filterState} onValueChange={setFilterState}>\n              <SelectTrigger className=\"w-[120px]\" data-testid=\"select-state-filter\">\n                <SelectValue placeholder=\"State\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All States</SelectItem>\n                <SelectItem value=\"New\">New</SelectItem>\n                <SelectItem value=\"Active\">Active</SelectItem>\n                <SelectItem value=\"Resolved\">Resolved</SelectItem>\n                <SelectItem value=\"Closed\">Closed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-3\">\n          {filteredWorkItems.map((item) => (\n            <div\n              key={item.id}\n              className=\"flex items-center justify-between p-4 border rounded-md hover-elevate\"\n              data-testid={`workitem-${item.id}`}\n            >\n              <div className=\"flex items-center gap-4 flex-1\">\n                <div className=\"flex items-center gap-2\">\n                  {getWorkItemIcon(item.type)}\n                  <span className=\"font-mono text-sm text-muted-foreground\">\n                    #{item.id}\n                  </span>\n                </div>\n                \n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <h4 className=\"font-medium text-sm\">{item.title}</h4>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {item.type}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      {getStateIcon(item.state)}\n                      <Badge variant={getStateColor(item.state) as any} className=\"text-xs\">\n                        {item.state}\n                      </Badge>\n                    </div>\n                    \n                    <Badge variant={getPriorityColor(item.priority) as any} className=\"text-xs\">\n                      {item.priority}\n                    </Badge>\n                    \n                    {item.hoursAllocated && (\n                      <span>\n                        {item.hoursBurned || 0}h / {item.hoursAllocated}h\n                      </span>\n                    )}\n                    \n                    {item.tags.length > 0 && (\n                      <div className=\"flex gap-1\">\n                        {item.tags.slice(0, 2).map((tag, idx) => (\n                          <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                            {tag}\n                          </Badge>\n                        ))}\n                        {item.tags.length > 2 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{item.tags.length - 2}\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                {item.assignedTo && (\n                  <div className=\"flex items-center gap-2\">\n                    <Avatar className=\"h-6 w-6\">\n                      <AvatarImage src={item.assignedTo.imageUrl} />\n                      <AvatarFallback className=\"text-xs\">\n                        {item.assignedTo.displayName.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {item.assignedTo.displayName}\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => openInAzureDevOps(item.id)}\n                data-testid={`link-workitem-${item.id}`}\n              >\n                <ExternalLink className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          ))}\n          \n          {filteredWorkItems.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <AlertTriangle className=\"h-8 w-8 mx-auto mb-2\" />\n              <p>No work items found matching your criteria.</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9128},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nconst PAT_TOKEN_KEY = \"azure_devops_pat_token\";\n\nfunction getAuthHeaders(): Record<string, string> {\n  const headers: Record<string, string> = {};\n  const patToken = localStorage.getItem(PAT_TOKEN_KEY);\n  if (patToken) {\n    headers[\"X-Azure-DevOps-PAT\"] = patToken;\n  }\n  return headers;\n}\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {\n    ...getAuthHeaders(),\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = getAuthHeaders();\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1837},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import Dashboard from \"@/components/Dashboard\";\n\nexport default function Home() {\n  return <Dashboard />;\n}","size_bytes":107},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/DashboardHeader.tsx":{"content":"import DashboardHeader from '../DashboardHeader';\n\nexport default function DashboardHeaderExample() {\n  //todo: remove mock functionality\n  const mockSprints = [\n    {\n      id: \"1\",\n      name: \"Sprint 67\",\n      path: \"LifeSafety.ai\\\\Sprint 67\",\n      startDate: \"2025-09-15T00:00:00Z\",\n      finishDate: \"2025-09-29T00:00:00Z\",\n      timeFrame: \"past\" as const\n    },\n    {\n      id: \"2\", \n      name: \"Sprint 68\",\n      path: \"LifeSafety.ai\\\\Sprint 68\",\n      startDate: \"2025-09-30T00:00:00Z\",\n      finishDate: \"2025-10-13T00:00:00Z\",\n      timeFrame: \"current\" as const\n    },\n    {\n      id: \"3\",\n      name: \"Sprint 69\", \n      path: \"LifeSafety.ai\\\\Sprint 69\",\n      startDate: \"2025-10-14T00:00:00Z\",\n      finishDate: \"2025-10-27T00:00:00Z\",\n      timeFrame: \"future\" as const\n    }\n  ];\n\n  return (\n    <DashboardHeader\n      project=\"LifeSafety.ai\"\n      organization=\"podtech-io\"\n      sprints={mockSprints}\n      selectedSprint=\"2\"\n      onSprintChange={(sprintId) => console.log('Sprint changed to:', sprintId)}\n      onRefresh={() => console.log('Refreshing data...')}\n    />\n  );\n}","size_bytes":1100},"client/src/components/examples/DependencyView.tsx":{"content":"import DependencyView from '../DependencyView';\n\nexport default function DependencyViewExample() {\n  //todo: remove mock functionality\n  const mockDependencies = [\n    {\n      id: \"dep-1\",\n      type: \"pr_review\" as const,\n      title: \"Waiting for security review on authentication PR\",\n      description: \"Pull request #1234 implementing JWT authentication requires security team approval before merging to main branch.\",\n      blockedItem: {\n        id: 1234,\n        title: \"Feature: Add authentication middleware\", \n        type: \"pull_request\" as const,\n        assignee: {\n          displayName: \"Sarah Johnson\",\n          imageUrl: undefined\n        }\n      },\n      blockingEntity: {\n        name: \"Dev Sharma\",\n        type: \"person\" as const,\n        imageUrl: undefined\n      },\n      severity: \"high\" as const,\n      daysSinceCreated: 5,\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/repos/pullrequest/1234\"\n    },\n    {\n      id: \"dep-2\", \n      type: \"work_item_blocked\" as const,\n      title: \"Database migration blocked by infrastructure team\",\n      description: \"User profile migration requires new database instance provisioning from infrastructure team.\",\n      blockedItem: {\n        id: 36122,\n        title: \"Database migration for user profiles\",\n        type: \"work_item\" as const,\n        assignee: {\n          displayName: \"Alex Rodriguez\",\n          imageUrl: undefined\n        }\n      },\n      blockingEntity: {\n        name: \"Infrastructure Team\",\n        type: \"external_system\" as const\n      },\n      severity: \"medium\" as const,\n      daysSinceCreated: 3,\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_workitems/edit/36122\"\n    },\n    {\n      id: \"dep-3\",\n      type: \"external_dependency\" as const,\n      title: \"Waiting for third-party API access\",\n      description: \"Integration with external safety compliance API requires vendor approval and API key provisioning.\",\n      blockedItem: {\n        id: 35742,\n        title: \"Integrate compliance API\",\n        type: \"work_item\" as const,\n        assignee: {\n          displayName: \"Maria Garcia\",\n          imageUrl: undefined\n        }\n      },\n      blockingEntity: {\n        name: \"SafetyVendor Corp\",\n        type: \"external_system\" as const\n      },\n      severity: \"high\" as const,\n      daysSinceCreated: 8,\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_workitems/edit/35742\"\n    },\n    {\n      id: \"dep-4\",\n      type: \"pr_review\" as const,\n      title: \"Code review needed for performance improvements\",\n      description: \"Performance optimization PR requires senior developer review before deployment to production.\",\n      blockedItem: {\n        id: 1236,\n        title: \"Dashboard performance improvements\",\n        type: \"pull_request\" as const,\n        assignee: {\n          displayName: \"Alex Rodriguez\",\n          imageUrl: undefined\n        }\n      },\n      blockingEntity: {\n        name: \"Christopher Lee\", \n        type: \"person\" as const,\n        imageUrl: undefined\n      },\n      severity: \"low\" as const,\n      daysSinceCreated: 1,\n      url: \"https://dev.azure.com/podtech-io/LifeSafety.ai/_git/repos/pullrequest/1236\"\n    }\n  ];\n\n  return (\n    <DependencyView \n      dependencies={mockDependencies}\n      organization=\"podtech-io\"\n      project=\"LifeSafety.ai\"\n    />\n  );\n}","size_bytes":3336},"client/src/components/examples/MetricsOverview.tsx":{"content":"import MetricsOverview from '../MetricsOverview';\n\nexport default function MetricsOverviewExample() {\n  //todo: remove mock functionality\n  const mockMetrics = {\n    totalWorkItems: 45,\n    completedWorkItems: 32,\n    inProgressWorkItems: 8,\n    blockedWorkItems: 5,\n    totalHoursAllocated: 480,\n    totalHoursBurned: 392,\n    activeTeamMembers: 12,\n    openPullRequests: 14,\n    pendingReviews: 7\n  };\n\n  return <MetricsOverview metrics={mockMetrics} />;\n}","size_bytes":458},"client/src/components/examples/PullRequestsSection.tsx":{"content":"import PullRequestsSection from '../PullRequestsSection';\n\nexport default function PullRequestsSectionExample() {\n  //todo: remove mock functionality\n  const mockPullRequests = [\n    {\n      id: 1234,\n      title: \"Feature: Add authentication middleware\",\n      description: \"Implements JWT-based authentication middleware with role-based access control for API endpoints. Includes comprehensive test coverage and documentation updates.\",\n      repository: \"lifesafety-backend\",\n      sourceBranch: \"feature/auth-middleware\",\n      targetBranch: \"main\",\n      author: {\n        displayName: \"Sarah Johnson\",\n        imageUrl: undefined\n      },\n      reviewers: [\n        {\n          displayName: \"Dev Sharma\",\n          imageUrl: undefined,\n          vote: \"approved\" as const\n        },\n        {\n          displayName: \"Alex Rodriguez\", \n          imageUrl: undefined,\n          vote: \"waiting\" as const\n        }\n      ],\n      status: \"active\" as const,\n      isDraft: false,\n      createdDate: \"2025-10-10T09:30:00Z\",\n      workItems: [33990, 33921]\n    },\n    {\n      id: 1235,\n      title: \"Bugfix: Resolve memory leak in background service\",\n      description: \"Fixes memory leak caused by unclosed database connections in the background service. Also optimizes query performance.\",\n      repository: \"lifesafety-services\",\n      sourceBranch: \"bugfix/memory-leak\",\n      targetBranch: \"main\",\n      author: {\n        displayName: \"Christopher Lee\",\n        imageUrl: undefined\n      },\n      reviewers: [\n        {\n          displayName: \"Maria Garcia\",\n          imageUrl: undefined,\n          vote: \"approved\" as const\n        },\n        {\n          displayName: \"James Wilson\",\n          imageUrl: undefined,\n          vote: \"approved\" as const\n        }\n      ],\n      status: \"completed\" as const,\n      isDraft: false,\n      createdDate: \"2025-10-09T14:15:00Z\",\n      workItems: [35584]\n    },\n    {\n      id: 1236,\n      title: \"WIP: Dashboard performance improvements\",\n      description: \"Work in progress: Implementing lazy loading and virtualization for the dashboard components to improve initial load time.\",\n      repository: \"lifesafety-frontend\",\n      sourceBranch: \"feature/dashboard-perf\",\n      targetBranch: \"develop\",\n      author: {\n        displayName: \"Alex Rodriguez\",\n        imageUrl: undefined\n      },\n      reviewers: [\n        {\n          displayName: \"Sarah Johnson\",\n          imageUrl: undefined,\n          vote: \"not_reviewed\" as const\n        }\n      ],\n      status: \"active\" as const,\n      isDraft: true,\n      createdDate: \"2025-10-11T16:45:00Z\",\n      workItems: [36122, 35742]\n    },\n    {\n      id: 1237,\n      title: \"Database schema migration for user profiles\",\n      description: \"Adds new fields to user profile table and creates migration scripts for existing data. Includes rollback procedures.\",\n      repository: \"lifesafety-database\",\n      sourceBranch: \"migration/user-profiles\",\n      targetBranch: \"main\",\n      author: {\n        displayName: \"Maria Garcia\",\n        imageUrl: undefined\n      },\n      reviewers: [\n        {\n          displayName: \"Dev Sharma\",\n          imageUrl: undefined,\n          vote: \"waiting\" as const\n        },\n        {\n          displayName: \"Christopher Lee\",\n          imageUrl: undefined,\n          vote: \"rejected\" as const\n        }\n      ],\n      status: \"active\" as const,\n      isDraft: false,\n      createdDate: \"2025-10-08T11:20:00Z\",\n      workItems: [36122]\n    }\n  ];\n\n  return (\n    <PullRequestsSection \n      pullRequests={mockPullRequests}\n      organization=\"podtech-io\"\n      project=\"LifeSafety.ai\"\n    />\n  );\n}","size_bytes":3630},"client/src/components/examples/SprintChart.tsx":{"content":"import SprintChart from '../SprintChart';\n\nexport default function SprintChartExample() {\n  //todo: remove mock functionality\n  const mockBurndownData = [\n    { day: \"1\", ideal: 50, actual: 50, date: \"2025-09-30\" },\n    { day: \"2\", ideal: 45, actual: 48, date: \"2025-10-01\" },\n    { day: \"3\", ideal: 40, actual: 44, date: \"2025-10-02\" },\n    { day: \"4\", ideal: 35, actual: 40, date: \"2025-10-03\" },\n    { day: \"5\", ideal: 30, actual: 35, date: \"2025-10-04\" },\n    { day: \"6\", ideal: 25, actual: 32, date: \"2025-10-07\" },\n    { day: \"7\", ideal: 20, actual: 28, date: \"2025-10-08\" },\n    { day: \"8\", ideal: 15, actual: 22, date: \"2025-10-09\" },\n    { day: \"9\", ideal: 10, actual: 18, date: \"2025-10-10\" },\n    { day: \"10\", ideal: 5, actual: 12, date: \"2025-10-11\" },\n    { day: \"11\", ideal: 0, actual: 8, date: \"2025-10-12\" }\n  ];\n\n  const mockCompletionData = [\n    { name: \"User Stories\", completed: 8, total: 12, percentage: 67 },\n    { name: \"Tasks\", completed: 24, total: 28, percentage: 86 },\n    { name: \"Bugs\", completed: 4, total: 5, percentage: 80 }\n  ];\n\n  return (\n    <SprintChart \n      burndownData={mockBurndownData}\n      completionData={mockCompletionData}\n      sprintDuration={14}\n      currentDay={8}\n    />\n  );\n}","size_bytes":1233},"client/src/components/examples/TeamPerformance.tsx":{"content":"import TeamPerformance from '../TeamPerformance';\n\nexport default function TeamPerformanceExample() {\n  //todo: remove mock functionality\n  const mockTeamMembers = [\n    {\n      displayName: \"Sarah Johnson\",\n      imageUrl: undefined,\n      email: \"sarah.johnson@podtech.io\",\n      workItems: {\n        total: 8,\n        completed: 6,\n        inProgress: 2,\n        blocked: 0\n      },\n      hours: {\n        allocated: 40,\n        burned: 35\n      },\n      pullRequests: {\n        active: 2,\n        reviewsPending: 1,\n        approved: 4\n      },\n      velocity: {\n        current: 12,\n        previous: 10,\n        trend: \"up\" as const\n      }\n    },\n    {\n      displayName: \"Christopher Lee\",\n      imageUrl: undefined,\n      email: \"christopher.lee@podtech.io\",\n      workItems: {\n        total: 6,\n        completed: 5,\n        inProgress: 1,\n        blocked: 0\n      },\n      hours: {\n        allocated: 40,\n        burned: 38\n      },\n      pullRequests: {\n        active: 1,\n        reviewsPending: 0,\n        approved: 3\n      },\n      velocity: {\n        current: 8,\n        previous: 8,\n        trend: \"stable\" as const\n      }\n    },\n    {\n      displayName: \"Alex Rodriguez\",\n      imageUrl: undefined,\n      email: \"alex.rodriguez@podtech.io\",\n      workItems: {\n        total: 10,\n        completed: 7,\n        inProgress: 2,\n        blocked: 1\n      },\n      hours: {\n        allocated: 40,\n        burned: 32\n      },\n      pullRequests: {\n        active: 3,\n        reviewsPending: 2,\n        approved: 2\n      },\n      velocity: {\n        current: 9,\n        previous: 11,\n        trend: \"down\" as const\n      }\n    },\n    {\n      displayName: \"Maria Garcia\",\n      imageUrl: undefined,\n      email: \"maria.garcia@podtech.io\",\n      workItems: {\n        total: 7,\n        completed: 7,\n        inProgress: 0,\n        blocked: 0\n      },\n      hours: {\n        allocated: 35,\n        burned: 33\n      },\n      pullRequests: {\n        active: 0,\n        reviewsPending: 0,\n        approved: 5\n      },\n      velocity: {\n        current: 14,\n        previous: 12,\n        trend: \"up\" as const\n      }\n    },\n    {\n      displayName: \"Dev Sharma\",\n      imageUrl: undefined,\n      email: \"dev.sharma@podtech.io\",\n      workItems: {\n        total: 9,\n        completed: 5,\n        inProgress: 3,\n        blocked: 1\n      },\n      hours: {\n        allocated: 40,\n        burned: 28\n      },\n      pullRequests: {\n        active: 4,\n        reviewsPending: 3,\n        approved: 1\n      },\n      velocity: {\n        current: 7,\n        previous: 9,\n        trend: \"down\" as const\n      }\n    }\n  ];\n\n  return <TeamPerformance teamMembers={mockTeamMembers} />;\n}","size_bytes":2674},"client/src/components/examples/WorkItemsTable.tsx":{"content":"import WorkItemsTable from '../WorkItemsTable';\n\nexport default function WorkItemsTableExample() {\n  //todo: remove mock functionality\n  const mockWorkItems = [\n    {\n      id: 33990,\n      title: \"Implement user authentication system\",\n      type: \"User Story\" as const,\n      state: \"Active\" as const,\n      assignedTo: {\n        displayName: \"Christopher Lee\",\n        imageUrl: undefined\n      },\n      hoursAllocated: 16,\n      hoursBurned: 8,\n      priority: \"High\" as const,\n      tags: [\"backend\", \"security\"]\n    },\n    {\n      id: 33921,\n      title: \"Fix login page CSS alignment issues\",\n      type: \"Bug\" as const,\n      state: \"New\" as const,\n      assignedTo: {\n        displayName: \"Sarah Johnson\",\n        imageUrl: undefined\n      },\n      hoursAllocated: 4,\n      hoursBurned: 0,\n      priority: \"Medium\" as const,\n      tags: [\"frontend\", \"ui\"]\n    },\n    {\n      id: 35584,\n      title: \"Create API documentation\",\n      type: \"Task\" as const,\n      state: \"Resolved\" as const,\n      assignedTo: {\n        displayName: \"Dev Sharma\",\n        imageUrl: undefined\n      },\n      hoursAllocated: 8,\n      hoursBurned: 6,\n      priority: \"Low\" as const,\n      tags: [\"documentation\"]\n    },\n    {\n      id: 36122,\n      title: \"Database migration for user profiles\",\n      type: \"Task\" as const,\n      state: \"Active\" as const,\n      assignedTo: {\n        displayName: \"Alex Rodriguez\",\n        imageUrl: undefined\n      },\n      hoursAllocated: 12,\n      hoursBurned: 9,\n      priority: \"Critical\" as const,\n      tags: [\"database\", \"migration\"]\n    },\n    {\n      id: 35742,\n      title: \"Performance optimization for dashboard\",\n      type: \"User Story\" as const,\n      state: \"Closed\" as const,\n      assignedTo: {\n        displayName: \"Maria Garcia\", \n        imageUrl: undefined\n      },\n      hoursAllocated: 20,\n      hoursBurned: 18,\n      priority: \"High\" as const,\n      tags: [\"performance\", \"frontend\"]\n    }\n  ];\n\n  return (\n    <WorkItemsTable \n      workItems={mockWorkItems}\n      organization=\"podtech-io\"\n      project=\"LifeSafety.ai\"\n    />\n  );\n}","size_bytes":2083},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Azure DevOps Analytics Dashboard\n\n## Overview\n\nThis is an Azure DevOps Analytics Dashboard that provides comprehensive sprint management, work item tracking, and team productivity insights. The application fetches data from Azure DevOps REST APIs and presents it through an interactive, data-rich dashboard interface with charts, metrics, and detailed work item information.\n\nThe dashboard focuses on providing actionable insights for development teams including burndown charts, work item completion metrics, pull request status, team performance tracking, and dependency/blocker visualization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management with custom query client configuration\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system following Material Design principles for enterprise dashboards\n- **Design System**: \"New York\" style variant with dark mode as default, focusing on data visualization and information density\n\n**Key Design Decisions**:\n- Dark mode primary theme (deep navy-blue background) optimized for analytics dashboards\n- Component-based architecture with reusable UI components in `client/src/components/ui`\n- Dashboard components split into focused modules (MetricsOverview, WorkItemsTable, SprintChart, etc.)\n- Custom path aliases configured for clean imports (`@/`, `@shared/`, `@assets/`)\n\n### Backend Architecture\n\n**Framework**: Express.js with TypeScript\n- **API Pattern**: RESTful endpoints under `/api` prefix\n- **Service Layer**: Azure DevOps service abstraction (`azure-devops-service.ts`) for external API integration\n- **Storage Layer**: Abstract storage interface (`IStorage`) for data persistence operations\n- **Request Handling**: Middleware-based logging and error handling\n- **Development**: Vite middleware integration for HMR in development mode\n\n**Key Design Decisions**:\n- Separation of concerns with dedicated service layer for Azure DevOps integration\n- Caching mechanism with 5-minute staleness check to minimize API calls\n- Generic storage interface to allow future database implementation flexibility\n- Environment-based configuration for Azure DevOps credentials\n\n### Data Storage\n\n**ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema Location**: `shared/schema.ts` - shared between client and server\n- **Migration Strategy**: `npm run db:push` to sync schema to database (no manual migrations)\n- **Database**: PostgreSQL via Replit's built-in database (Neon serverless driver)\n- **Storage Implementation**: Using `DbStorage` class for database persistence\n\n**Schema Design**:\n- **Users**: Basic authentication with username/password\n- **Repositories**: Azure DevOps repository metadata\n- **Commits**: Full commit history with change counts and author information\n- **Work Items**: Complete work item details including state, assignments, hours\n- **Pull Requests**: PR tracking with reviewers and status\n- **Team Members**: Team composition and assignments\n- **Sprints**: Sprint/iteration tracking with date ranges\n\n**Key Design Decisions**:\n- UUID/VARCHAR primary keys for distributed system compatibility\n- JSONB fields for flexible nested data (change counts, custom fields, reviewers)\n- Timestamp tracking for cache invalidation and data freshness\n- Zod schema validation using drizzle-zod for type-safe inserts\n- Database configured via `DATABASE_URL` environment variable\n\n### Authentication & Authorization\n\nCurrently implements basic user authentication with username/password stored in the database. No session management implementation visible in the codebase - this appears to be a placeholder for future development.\n\n## External Dependencies\n\n### Third-Party Services\n\n**Azure DevOps REST API**:\n- **Organization**: podtech-io\n- **Project**: LifeSafety.ai\n- **Authentication**: Personal Access Token (PAT) via `AZURE_DEVOPS_PAT_TOKEN` environment variable\n- **Key Endpoints Used**:\n  - Work Item Tracking (WIT) API for work items, queries, fields\n  - Git Repositories API for commits and repository data\n  - Work API for sprints, iterations, and boards\n  - Pull Requests API for PR tracking\n\n**PostgreSQL Database**:\n- Replit built-in PostgreSQL database (Neon-backed)\n- Connection via `DATABASE_URL` environment variable\n- WebSocket-based serverless driver for edge compatibility\n- Schema synced via `npm run db:push` command\n\n### Key NPM Dependencies\n\n**Frontend**:\n- `@tanstack/react-query`: Server state management and caching\n- `wouter`: Lightweight routing solution\n- `recharts`: Chart visualization library for burndown and analytics charts\n- `date-fns`: Date manipulation and formatting\n- `react-hook-form` + `@hookform/resolvers`: Form handling with Zod validation\n- `cmdk`: Command menu component\n- `embla-carousel-react`: Carousel functionality\n- Multiple `@radix-ui/*` packages: Headless UI primitives for accessibility\n\n**Backend**:\n- `express`: Web server framework\n- `drizzle-orm`: Type-safe ORM\n- `drizzle-zod`: Schema to Zod validator conversion\n- `connect-pg-simple`: PostgreSQL session store (imported but not actively used)\n- `nanoid`: Unique ID generation\n\n**Development**:\n- `vite`: Build tool and dev server\n- `tsx`: TypeScript execution for development\n- `esbuild`: Production bundling for server code\n- Replit-specific plugins for development environment integration\n\n### API Integration Pattern\n\nThe application uses a service abstraction pattern where `createAzureDevOpsService()` encapsulates all Azure DevOps API interactions. The service provides methods for:\n- Fetching repositories, commits, and commit analytics\n- Retrieving work items with filtering by iteration\n- Accessing pull requests and team member data\n- Sprint/iteration management\n\nData flows from Azure DevOps → Service Layer → Storage Layer → REST API → React Query → UI Components, with caching at the storage layer to optimize API usage.\n\n## Recent Changes (September 30, 2025)\n\n### Replit Environment Setup - GitHub Import Configuration\n- **Database**: Created and configured PostgreSQL database with Drizzle ORM\n  - Database provisioned using Replit's built-in PostgreSQL service\n  - Schema successfully pushed to database using `npm run db:push`\n  - Storage layer uses `DbStorage` class for database persistence\n  - All tables created: users, repositories, commits, workItems, pullRequests, teamMembers, sprints\n- **Development Server**: Server running on port 5000 with 0.0.0.0 host binding\n  - Vite dev server configured with `allowedHosts: true` for Replit proxy support (already present in codebase)\n  - Express server serves both API and frontend on same port\n- **Workflow**: Configured \"Start application\" workflow\n  - Command: `npm run dev`\n  - Output type: webview\n  - Port: 5000\n- **Deployment**: Configured for autoscale deployment\n  - Build command: `npm run build` (builds frontend with Vite, bundles backend with esbuild)\n  - Run command: `npm run start` (production server)\n  - Deployment target: autoscale (stateless, suitable for web dashboard)\n- **Application Status**: Successfully running and tested\n  - Dashboard displays demo data (AZURE_DEVOPS_PAT_TOKEN not configured)\n  - All UI components rendering correctly\n  - Dark theme analytics dashboard functional\n\n### Configuration Notes\n- The app requires `AZURE_DEVOPS_PAT_TOKEN` environment variable for Azure DevOps integration\n- When PAT token is not set, the app generates demo data for testing purposes\n- Database schema is automatically synced using Drizzle Kit\n- Vite dev server already had `allowedHosts: true` configured in `server/vite.ts`\n- All dependencies were pre-installed (package-lock.json present)","size_bytes":7924},"client/src/components/SettingsDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle, Eye, EyeOff } from \"lucide-react\";\n\ninterface SettingsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst PAT_TOKEN_KEY = \"azure_devops_pat_token\";\n\nexport default function SettingsDialog({ open, onOpenChange }: SettingsDialogProps) {\n  const [patToken, setPatToken] = useState(\"\");\n  const [showToken, setShowToken] = useState(false);\n  const [saved, setSaved] = useState(false);\n\n  useEffect(() => {\n    if (open) {\n      const storedToken = localStorage.getItem(PAT_TOKEN_KEY);\n      if (storedToken) {\n        setPatToken(storedToken);\n      }\n      setSaved(false);\n    }\n  }, [open]);\n\n  const handleSave = () => {\n    if (patToken.trim()) {\n      localStorage.setItem(PAT_TOKEN_KEY, patToken.trim());\n      setSaved(true);\n      setTimeout(() => {\n        onOpenChange(false);\n        window.location.reload();\n      }, 1000);\n    }\n  };\n\n  const handleClear = () => {\n    localStorage.removeItem(PAT_TOKEN_KEY);\n    setPatToken(\"\");\n    setSaved(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-settings\">\n        <DialogHeader>\n          <DialogTitle>Settings</DialogTitle>\n          <DialogDescription>\n            Configure your Azure DevOps Personal Access Token (PAT) to access your project data.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-sm\">\n              Your PAT token will be stored in browser storage. To create a PAT token, visit your Azure DevOps organization settings.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"pat-token\">Personal Access Token</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"pat-token\"\n                type={showToken ? \"text\" : \"password\"}\n                placeholder=\"Enter your Azure DevOps PAT token\"\n                value={patToken}\n                onChange={(e) => setPatToken(e.target.value)}\n                className=\"pr-10\"\n                data-testid=\"input-pat-token\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                onClick={() => setShowToken(!showToken)}\n                data-testid=\"button-toggle-token-visibility\"\n              >\n                {showToken ? (\n                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                )}\n              </Button>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Required scopes: Work Items (Read), Code (Read), Project and Team (Read)\n            </p>\n          </div>\n\n          {saved && (\n            <Alert className=\"bg-green-500/10 border-green-500\">\n              <AlertDescription className=\"text-green-400\">\n                Token saved successfully! Reloading dashboard...\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={handleClear}\n            disabled={!patToken}\n            data-testid=\"button-clear-token\"\n          >\n            Clear Token\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={!patToken.trim()}\n            data-testid=\"button-save-token\"\n          >\n            Save Token\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4214}},"version":1}